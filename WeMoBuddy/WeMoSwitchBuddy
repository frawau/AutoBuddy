#!/usr/bin/env python3
# -*- coding:utf-8 -*-
#
# This application is simply a bridge application for WeMo switches
#
# Copyright (c) 2017 Fran√ßois Wautier
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
# of the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies
# or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
# IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE

import argparse
import sys
import traceback
import json
import logging
import os
import ssl
import buddylib as bl
import asyncio as aio
from aioouimeaux.wemo import WeMo
from functools import partial

SUBTYPE = "wemo"
CERTFILE = "autobuddy.crt"
__version__ = "0.10"


def intround(x):
    return int(round(x))

#<controlgroup modal="1" name="colour" label="Colour" widget="colourpicker">

wemo_commands = """
<buddyui version="0.1">
<command  name="wemo">
        <controlgroup type="list" name="power" label="Power" rteffect="1">
            <control type="switch" name="power" label="Power" rteffect="1">
                <value label="On">on</value>
                <value label="Off">off</value>
            </control>
        </controlgroup>
    </command>
</buddyui>
"""

wemo_config = ""
wemo_config_default = {
    "colour": {
        "hue": 102,
         "saturation": 163,
         "value": 211}}

# coammands must be defined after the config has been read. See below
wemo_module_commands = {}
# wemo_module_commands={"scan":{"subject":"switch.wemo","value":{}}}


def cssColour():

    return "#73d34c"


def wemo_process(self, msg):
    """WeMo is a one way communication device"""
    if msg["content"]["command"] == "nickname":
        # print msg
        self.nickname = msg["content"]["value"]
        self.controller.sending(
            {"subject": "control" + "." + self.controller.type,
                "content_type": "request",
                "content": {"request": "nickname",
                            "target": self.controller.type + "." + self.name,
                            #"token": self.controller.target,
                            "value": {"name": self.name, "nickname": msg["content"]["value"]}}})
    elif msg["content"]["command"] == "status":
        # Not gone the way of the dodo
        # try:
        self.controller.sending({"subject": self.controller.type,
                                 "content_type": "event",
                                 "content": {"event": "status",
                                             "target": self.controller.type +
                                             "." +
                                             self.name,
                                             "icon status":
                                                 {"bu-fill": {"fill": (self.state and cssColour()) or "transparent"}, "bu-not-present": {
                                              "opacity": 0}},
                                             "value": {}}})
        # except: #Most probably is known but we lost pairing
            # pass
    elif msg["content"]["command"] == "power":
        dosend = False
        if msg["content"]["value"] ["power"]=="on" and self.state != 1:
            self.conn.on()
            dosend = True
        elif msg["content"]["value"] ["power"]=="off" and self.state == 1:
            self.conn.off()
            dosend = True
        if dosend:
            self.controller.sending(
                            {"subject": self.controller.type,
                                "content_type": "event",
                                "content": {"event": "power",
                                            "target": self.controller.type +
                                            "." +
                                            self.name,
                                            "value": msg["content"]["value"]}})
    return None



def got_wemo(device):
    """Register a wemo detected by the wemo environment"""
    bridgectl.register(device)
    device.register_callback("statechange", bridgectl.status_changed)

async def heartbeat(self, duration=5):
    while True:
        await aio.sleep(120)
        #print("Heartbeat")
        try:  # Could happen that conn is None... Maybe a race condition with unregister
        #if True:
            future = self.conn.basicevent.GetIconURL()
            await aio.sleep(2)
            try:
                x=future.result()
                del(future)
            except:
                try:
                    bridgectl.unregister(self.conn)
                    del(future)
                except:
                    pass
                return
        except:
            pass

# Hop we go....
bl.switch._process = wemo_process
bl.switch.heartbeat = heartbeat

class WeMoBridge(bl.BuddyBridge):

    """
    This is the bridge application. It will check for the current list  of wemo
    It will report any new bulb
    """

    def __init__(self, loop, future, config, log):
        super(WeMoBridge, self).__init__(loop, future, config, log)
        self.wemo_env = None
        self.wemo_config = wemo_config_default

    def process_command(self, msg):
        if msg["content"]["command"] == "update config":
            if msg["content"]["target"] == self.target:
                for k, v in msg["content"]["value"].items():
                    wemo_config_default[k] = v

                self.sending({"subject": "control" + "." + self.subtype,
                              "content_type": "request",
                              "content": {"request": "save configuration",
                                          "target": self.type,
                                          "value": bl.encrypt(wemo_config_default, self.config["buddykey"])}})
        elif msg["content"]["command"] == "deletion":
            self.sending(
                {"subject": "control" + "." + self.type,
                    "content_type": "request",
                    "content": {"request": "deletion",
                                "target": self.type,
                                "value":  msg["content"]["value"]}})

        else:
            for awemo in self.devices:
                awemo.process(msg)

    def process_response(self, msg):
        # if msg["content"]["token"] != self.target:
            # if self.log:
                # self.log.warning("Token not matching {} vs {}".format(msg["content"]["token"],self.target))
            # else:
                # print ("Token not matching {} vs
                # {}".format(msg["content"]["token"],self.target))
        if self.state == "init" and msg["content"]["response"] == "configuration" and msg["subject"] == self.target:
            # Getting the config
            newconfig = {}
            fromconfig = []
            if msg["content"]["configuration"]:
                try:
                    storedconfig = bl.decrypt(
                        msg["content"]["configuration"],
                        self.config["buddykey"])
                    if self.config["debug"]:
                        self.log.debug(
                            "The config stored is {}".format(storedconfig))
                except:
                    storedconfig = {}
                    savenew = True
                    # log
                    if self.log:
                        self.log.warning("Config is mangled")
                    else:
                        print("Config is mangled")

                for x in storedconfig:
                    self.wemo_config[x] = storedconfig[x]

            self.config["database"] = msg["content"]["database"]
            if "configonly" in self.config and self.config["configonly"]:
                self.state = "wait config save"
            else:
                self.state = "active"
                self.build()
            # if savenew or ("configonly" in self.config and self.config["configonly"]):
                # self.sending({"subject":"control" + "." + self.subtype,
                                #"content_type": "request",
                                #"content": {"request":"save configuration",
                                            #"target":self.target,
                                            #"value":bl.encrypt(wemo_config_default,self.config["buddykey"])}})

        elif msg["content"]["response"] == "save configuration" and msg["subject"] == self.target:
            if self.state == "active" and msg["content"]["status"] != "done":
                # log
                if self.log:
                    self.log.warning("Warning: Configuration was not saved.")
                else:
                    print("Warning: Configuration was not saved.")
            else:
                self.sending({"subject": "control" + "." + self.target,
                              "content_type": "request",
                              "content": {"request": "functions",
                                          "target": self.type,
                                          "subtype": self.subtype,
                                          #"token": self.target,
                                          "value": {"configs": [wemo_config, wemo_config_default]}}})
                self.sending({"subject": self.target,
                              "content_type": "event",
                              "content": {"event": "config updated",
                                          "target": self.target,
                                          "value": wemo_config_default}})
                # Now update all the wemo present
                for wemo in self.devices:
                    if wemo.present:
                        self.sending({"subject": self.type,
                                      "content_type": "event",
                                      "content": {"event": "presence",
                                                  "target": self.type +
                                                  "." +
                                                  wemo.name,
                                                  "value": "online",
                                                  "icon status": {"bu-fill": {"fill": cssColour()}, "bu-not-present": {"opacity": 0}}}})

        elif msg["content"]["response"] == "configuration" and msg["subject"] == self.target:
            if msg["content"]["configuration"]:
                try:
                    storedprop = bl.decrypt(
                        msg["content"]["configuration"],
                        self.config["buddykey"])
                    if self.config["debug"]:
                        self.log.debug(
                            "The property stored is {}".format(storedprop))
                except:
                    storedprop = {}
                    if self.config["debug"]:
                        self.log.debug(
                            "The property stored cannot be decrypted.")
                for k, v in storedprop.items():
                    wemo_config_default[k] = v

            if not(msg["content"]["configuration"] and storedprop):
                # First time around... was never saved that property.. let's do
                # it
                self.sending({"subject": "control" + "." + self.type,
                              "content_type": "request",
                              "content": {"request": "save configuration",
                                          "target": self.subtype,
                                          #"token": self.target,
                                          "value": bl.encrypt(wemo_config_default, self.config["buddykey"])}})
        elif self.state == "active":
            if msg["content"]["response"] == "creation" and msg["content"]["status"] == "done":
                sess = bl.getSession(self.config["database"])
                switch = sess.query(bl.switch).filter_by(
                    name=msg["subject"].split(".")[-1]).one()
                switch.state = 0
                self.sending({"subject": self.type,
                              "content_type": "event",
                              "content": {"event": "new device",
                                          "target": self.type +
                                          "." +
                                          switch.name,
                                          "value": {"type": self.type, "subtype": self.subtype,
                                                    "name": switch.name, "nickname": switch.nickname}}})
                bidx = 0
                notseen = True
                for b in self.pending:
                    if b.buddyname == switch.name:
                        switch.present = True
                        switch.conn = b
                        switch.controller = self
                        self.devices.append(switch)
                        self.pending = self.pending[
                            :bidx] + self.pending[
                                bidx + 1:]
                        self.sending({"subject": self.type,
                                      "content_type": "event",
                                      "content": {"event": "presence",
                                                  "target": self.type +
                                                  "." +
                                                  switch.name,
                                                  "value": "online",
                                                  "icon status": {"bu-fill": {"fill": cssColour()}, "bu-not-present": {"opacity": 0}}}})

                        notseen = False
                        break
                    bidx += 1
                if notseen:
                    self.sending({"subject": self.type,
                                  "content_type": "event",
                                  "content": {"event": "presence",
                                              "target": self.type +
                                              "." +
                                              switch.name,
                                              "value": "offline",
                                              "icon status": {"bu-fill": {"fill": cssColour()},
                                                              "bu-not-present": {"opacity": 1}}}})
                sess.close()
            elif msg["content"]["response"] == "nickname":
                if msg["content"]["status"] == "done":
                    if self.log:
                        self.log.debug(msg)
                    for switch in self.devices:
                        if switch.name == msg["subject"].split(".")[-1]:
                            switch.nickname = msg["content"]["value"]
                            self.sending({"subject": self.type,
                                          "content_type": "event",
                                          "content": {"event": "nickname",
                                                      "target": self.type +
                                                      "." +
                                                      switch.name,
                                                      "value": switch.nickname}})
                            break

            elif msg["content"]["response"] == "deletion":
                if msg["content"]["status"] == "done":
                    if self.log:
                        self.log.debug(msg)
                    sidx = 0
                    doremove = False
                    for switch in self.devices:
                        if switch.name == msg["subject"].split(".")[-1]:
                            self.wemo_env.device_gone(switch.conn)
                            doremove = True
                            break
                        sidx += 1
                    self.sending({"subject": self.type,
                                    "content_type": "event",
                                    "content": {"event": "deletion",
                                                "target": self.type +
                                                "." +
                                                msg["subject"].split(".")[-1],
                                                "value": msg["subject"].split(".")[-1]}})

                    if doremove:
                        del self.devices[sidx]
        else:
            if self.log:
                self.log.warning(
                    "Unknown response {} {} {}".format(msg["subject"],
                                                       msg["content_type"],
                                                       msg["content"]))
            else:
                print (
                    "Unknown response {} {} {}".format(msg["subject"],
                                                       msg["content_type"],
                                                       msg["content"]))

    def build(self):
        self.sending({"subject": "control" + "." + self.target,
                      "content_type": "request",
                      "content": {"request": "functions",
                                  "target": self.type,
                                  "subtype": self.subtype,
                                  #"token": self.target,
                                  "value": {"functions": wemo_commands}}})

        self.sending({"subject": self.target,
                      "content_type": "event",
                      "content": {"event": "config updated",
                                  "target": self.target,
                                  "value": wemo_config_default}})
        self.sending({"subject":"control","content": {"subject":self.type},"content_type":"mute events"})
        # No wemo is present yet
        self.wemo_env = WeMo(callback=got_wemo,types=["Switch"])
        self.wemo_env.start()


    def register(self, awemo):
        awemo.buddyname = self.subtype + "-" + awemo.serialnumber
        notseen = True
        try:
            sess = bl.getSession(self.config["database"])
            switch = sess.query(bl.switch).filter_by(name=awemo.buddyname).one()
            switch.present = False
            switch.state = 0
            self.devices.append(switch)
        except:
            pass

        for wemo in self.devices:
            ispresent = False

            if awemo.buddyname == wemo.name:
                wemo.conn = awemo
                wemo.controller = self
                ispresent = True
                if ispresent != wemo.present:
                    wemo.present = ispresent
                    self.sending({"subject": self.type,
                                  "content_type": "event",
                                  "content": {"event": "presence",
                                              "target": self.type +
                                              "." +
                                              wemo.name,
                                              "value":
                                              ispresent and "online" or "offline",
                                              "icon status": {"bu-not-present": {"opacity": (not ispresent and 1) or 0}}}})
                notseen = False
                wemo.hb=aio.ensure_future(wemo.heartbeat())
                break
        if notseen:
            self.pending.append(awemo)
            self.sending({"subject": "control" + "." + self.type,
                          "content_type": "request",
                          "content": {"request": "creation",
                                      "target": self.type,
                                          # Here we need the type
                                      #"token": self.target,
                                      "value": {"name": awemo.buddyname, "nickname": awemo.name, "subtype": self.subtype}}})

    def unregister(self, awemo):
        if awemo in self.pending:
            self.pending.remove(awemo)
        else:
            for switch in self.devices:
                try:
                    if switch.name == awemo.buddyname:
                        self.wemo_env.device_gone(switch.conn)
                        switch.conn = None
                        switch.present = False
                        self.sending({"subject": self.type,
                                      "content_type": "event",
                                      "content": {"event": "presence",
                                                  "target": self.type +
                                                  "." +
                                                  switch.name,
                                                  "value": "offline",
                                                  "icon status": {"bu-not-present": {"opacity": 1}}}})
                except:
                    pass

    def status_changed(self,device):
        for switch in self.devices:
            if switch.name == device.buddyname:
                if switch.state != device.get_state():
                    switch.state = device.get_state()
                    self.sending({"subject": self.type,
                                "content_type": "event",
                                "content": {"event": "status",
                                            "target": self.type +
                                            "." +
                                            switch.name,
                                            "icon status":
                                                {"bu-fill": {"fill": (switch.state and cssColour()) or "transparent"}, "bu-not-present": {
                                            "opacity": 0}},
                                                "value": {"power": {"power": switch.state and "on" or "off"}}}})
                break

    def close(self):
        for wemo in self.devices:
            try:
                wemo.hb.cancel()
            except:
                pass

aboutstr = """<p>WeMoBuddy is a set of bridges talking to <a href="http://www.wemo.com/">Belkin's WeMo device</a>. WeMo devices will be automatically
detected. The icon used for switches is based on one made by Freepik from www.flaticon.com </p>
<p class=\"bu-copyright\">&copy; 2017 Fran&ccedil;ois Wautier</p>
"""
iconstr = """
<svg class="bu-device-icon" width="60" height="60" viewBox="0 0 537.63 537.63" xmlns="http://www.w3.org/2000/svg">
<g>
    <circle class="bu-fill" cx="250" cy="144" r="127" stroke="none" fill="white" />
    <path class="bu-shape" d="M124.795,144.021c0-69.472,56.528-126.018,126.018-126.018s126.018,56.546,126.018,126.018
        c0,11.432-1.513,22.737-4.537,33.611l17.355,4.789c3.439-12.44,5.185-25.348,5.185-38.4C394.834,64.611,330.222,0,250.813,0
        S106.792,64.611,106.792,144.02c0,40.902,17.499,80.022,47.995,107.314l12.008-13.393
        C140.097,214.051,124.795,179.81,124.795,144.021z" />
    <rect class="bu-shape" x="230" y="122" width="42" height="160" fill="white" stroke="none"  />
    <rect class="bu-shape" x="284" y="212" width="42" height="62" fill="white" stroke="none"  />
    <path class="bu-shape bu-hand" d="M394.834,252.038c-0.001,0-0.001,0-0.002,0v-0.001c0-19.857-16.148-36.005-36.005-36.005
        c-7.41,0-14.302,2.25-20.032,6.101c-4.925-14.023-18.289-24.104-33.976-24.104c-6.556,0-12.701,1.769-18.001,4.841v-58.849
        c0-19.857-16.148-36.005-36.005-36.005c-19.857,0-36.005,16.148-36.005,36.005v144.926c-20.513,4.181-36.006,22.359-36.006,44.101
        c0,25.114,9.452,49.075,26.626,67.456c17.661,18.903,27.382,43.08,27.382,68.14v26.428c0,10.082,5.401,24.124,31.199,33.611
        c15.681,5.761,36.564,8.947,58.815,8.947c41.532,0,90.013-11.144,90.012-42.557v-47.167c0-12.476,1.603-25.69,4.879-40.38
        c8.695-39.155,13.124-79.355,13.124-119.483C430.839,268.186,414.691,252.038,394.834,252.038z M400.126,403.619
        c-3.565,15.986-5.293,30.46-5.293,44.286v47.167c0,13.538-32.297,24.556-72.01,24.556s-72.01-11.018-72.01-24.556v-26.428
        c0-29.633-11.45-58.203-32.243-80.454c-14.024-15.014-21.765-34.583-21.765-55.142c0-11.733,7.527-21.739,18.003-25.455v34.456
        h18.001V144.021c0-9.938,8.084-18.003,18.003-18.003c9.92,0,18.003,8.066,18.003,18.003v89.974c0,0.013-0.001,0.026-0.001,0.039
        h0.001v36.005h18.003v-36.024c0.011-9.929,8.089-17.984,18.002-17.984c9.92,0,18.003,8.066,18.003,18.003v17.964
        c0,0.013-0.001,0.026-0.001,0.039h0.001v18.002h18.001v-18.002h0.001c0-9.938,8.084-18.003,18.003-18.003
        c9.92,0,18.003,8.066,18.003,18.003v36.005h18.001V270.15c9.316,0.249,18.004,8.013,18.004,17.892
        C412.836,326.838,408.551,365.742,400.126,403.619z" fill="black" opacity="1" fill-rule="nonzero"/>
    <path class="bu-not-present" d="M268.5,270m-235,0a235,235 0 1,1 470,0a235,235 0 1,1 -470,0M90,447.63L447.63,90"
        stroke="#a94442" stroke-width="60" fill="none" opacity="1" />
</g>
</svg>
"""

cfgdefault = {
    "type": "switch",
     "subtype": SUBTYPE,
     "host": "localhost",
     "port": 8745,
     "credential": "",
     "ssl": ""}


def configure():
    parser = argparse.ArgumentParser(description="Track wemo buttons..")
    # version="%prog " + __version__ + "/" + bl.__version__)
    parser.add_argument("-t", "--type", default=cfgdefault["type"],
                        help="The type of devices we handle. (default \"%s\")." % cfgdefault["type"])
    parser.add_argument("-s", "--subtype", default=cfgdefault["subtype"],
                        help="The specific subtype we manage. (default \"%s\")." % cfgdefault["subtype"])
    parser.add_argument("-a", "--host", default=cfgdefault["host"],
                        help="The host address of the server (default \"%s\")." % cfgdefault["host"])
    parser.add_argument("-p", "--port", type=int, default=cfgdefault["port"],
                        help="The port used by the server (default \"%s\")." % cfgdefault["port"])
    parser.add_argument("-c", "--config", default="/etc/autobuddy/wemo.cfg", type=argparse.FileType('r'),
                        help="Config file to use (default \"/etc/autobuddy/wemo.cfg\")")
    parser.add_argument("-V", "--credential", default=cfgdefault['credential'],
                        help="The credential used to verify authorization (default \"%s\")." % cfgdefault["credential"])
    parser.add_argument("-d", "--debug", action="count", default=0,
                        help="Log debug information (default False)")
    parser.add_argument("-S", "--ssl", default="",
                        help="The directory where the file %s can be found." % (CERTFILE))
    parser.add_argument("-v", "--verbose", action="store_true", default=False,
                        help="Log warning messages")
    parser.add_argument("-C", "--configonly", default="",
                        help="Exit after the the configuration has been saved")

    try:
        opts = parser.parse_args()
    except Exception as e:
        parser.error("Error: " + str(e))

    if opts.debug:
        logging.basicConfig(
            level=logging.DEBUG,
            format='%(levelname)7s: %(message)s',
            stream=sys.stderr,
        )
    elif opts.verbose:
        logging.basicConfig(
            level=logging.WARNING,
            format='%(levelname)7s: %(message)s',
            stream=sys.stderr,
        )
    else:
        logging.basicConfig(
            level=logging.CRITICAL,
            format='%(levelname)7s: %(message)s',
            stream=sys.stderr,
        )
    wemolog = logging.getLogger('')
    wemocfg = {"debug": opts.debug}
    try:
    # if True:
        try:
            cfgdata = json.load(opts.config)
            opts.config.close()
        except:
            cfgdata = {}
            wemolog.warning("Config file could not be opened.")

            # Definition
        for attr in cfgdefault:
            if opts.__getattribute__(attr) != cfgdefault[attr]:
                wemocfg[attr] = opts.__getattribute__(attr)
            elif attr in cfgdata:
                wemocfg[attr] = cfgdata[attr]
            else:
                wemocfg[attr] = opts.__getattribute__(attr)
            if opts.debug:
                wemolog.debug("The %s is %s." % (attr,wemocfg[attr]))

        if wemocfg["ssl"] and not (os.path.isfile(wemocfg["ssl"] + "/" + CERTFILE)):
            wemolog.critical("Encryption: Could not find {} .".format(
                wemocfg["ssl"] + "/" + CERTFILE))
            sys.exit()

        if opts.debug:
            if wemocfg["ssl"]:
                wemolog.debug(
                    "The ssl certificates can be found in %s" %
                    wemocfg["ssl"])
            else:
                wemolog.debug("The connection is not encrypted")

        if "buddykey" in cfgdata:
            wemocfg["buddykey"] = cfgdata["buddykey"]

        if opts.configonly:

            if "buddykey" not in wemocfg:
                if opts.debug:
                    wemolog.debug("Generating random key")
                wemocfg["buddykey"] = bl.keygen()
            try:
                del(wemocfg["debug"])
            except:
                pass
            with open(opts.configonly, "w") as cfile:
                json.dump(wemocfg, cfile)
            os.chmod(opts.configonly, 384)  # 0600
            sys.exit()

    except Exception as e:
        wemolog.error("Error: %r" % e)
        sys.exit(-2)

    return (wemolog, wemocfg)


if __name__ == "__main__":
    log, config = configure()
    log.info("Configured")
    loop = aio.get_event_loop()
    if config["debug"]:
        loop.set_debug(True)


    if config["ssl"]:
        sslcontext = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,
                                                cafile=config["ssl"] + '/' + CERTFILE)

        sslcontext.check_hostname = False
    else:
        sslcontext = None
    connFuture = aio.Future()
    fac = loop.create_connection(
        partial(WeMoBridge,
                loop,
                connFuture,
                config,
                log),
        config["host"],
     config["port"],
     ssl=sslcontext)
    conn, bridgectl = loop.run_until_complete(fac)
    loop.call_soon(
        bridgectl.configrequest,
        {"about": {"WeMoBuddy": aboutstr},
         "display": {config["type"]:{config["subtype"]: iconstr}}})

    try:
        loop.run_until_complete(connFuture)
    except KeyboardInterrupt:
        print("\n", "Exiting at user's request")
    finally:

        bridgectl.wemo_env.stop()
        bridgectl.close()
        conn.close()
        loop.run_until_complete(aio.sleep(1))
        loop.close()
