#!/usr/bin/env python3
# -*- coding:utf-8 -*-
#
# This application looks for published services Avahi/Bonjour
# figures out the MAC address of the server and send events about
# newly discoverd services.
#
# Copyright (c) 2017 Fran√ßois Wautier
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
# of the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies
# or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
# IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE

import argparse
import sys
import json
import os
import ssl
import logging
#import ipaddress
import asyncio as aio
import aiohttp as aioh
import buddylib as bl
import socket
import netifaces
from functools import partial
from aiozeroconf import ZeroconfServiceTypes,ServiceBrowser, Zeroconf
from struct import pack,unpack
from urllib.parse import urlparse
import xml.etree.ElementTree as ET
from io import StringIO


SUBTYPE = "scanner"
__version__ = "0.10"
CERTFILE = "autobuddy.crt"
scanner_function = """
"""

scanner_config = """
<buddyui version="0.1">
    <configuration  name="scanner">
        <control type="spinner" name="probe" label="Scanner interval">
            <start>30</start>
            <end>3600</end>
            <increment>5</increment>
            <postfix>secs</postfix>
            <default>600</default>
        </control>
    </configuration>
</buddyui>
"""
scanner_config_default = {"probe": 600}

class MyService(object):

    def remove_service(self, zeroconf, type, name):
        aio.ensure_future(bridgectl.unregister(name),loop=bridgectl.loop)

    def add_service(self, zeroconf, type, name):
        aio.ensure_future(self.found_service(zeroconf,type,name))

    async def found_service(self,zc,type,name):
        global bridgectl
        info = await zc.get_service_info(type, name)
        if info:
            info.address=socket.inet_ntoa(pack('>L',unpack('>L',info.address)[0]))
            aio.ensure_future(bridgectl.register(info),loop=bridgectl.loop)



class ScannerBridge(bl.BuddyBridge):

    """
    This is the bridge application. It will check for the current list  of scanner bulb.
    It will report any new bulb
    """

    def __init__(self, loop, future, config, log):
        super(ScannerBridge, self).__init__(loop, future, config, log)
        self.probe_service = []
        self.seen_service = {}
        self.scanner_config = scanner_config_default
        self.scan_request=None
        self.zeroconf = None
        self.browsers = {}

    def process_command(self, msg):
        if msg["content"]["command"] == "update config":
            if msg["content"]["target"] == self.target:
                for k, v in msg["content"]["value"].items():
                    scanner_config_default[k] = v
                self.sending({"subject": "control" + "." + self.subtype,
                              "content_type": "request",
                              "content": {"request": "save configuration",
                                          "target": self.type,
                                          #"token": self.target,
                                          "value": bl.encrypt(scanner_config_default, self.config["buddykey"])}})
        elif msg["content"]["command"] == "known services":
            if msg["subject"].startswith(self.type) and "target" in msg["content"]:
                los=[]
                for entity in self.seen_service.values():
                    if msg["content"]["value"] == entity.type:
                        newprop={}
                        for x,y in entity.properties.items():
                            try:
                                newprop[x.decode()]=y.decode()
                            except:
                                newprop[x.decode()]=y
                        los.append({"name":entity.name,"address":entity.address,
                                    "port":entity.port,"properties":newprop,
                                    "type":entity.type, "mac":entity.mac})
                self.sending({"subject": msg["content"]["target"],
                            "content_type": "event",
                            "content": {"event": "known services",
                                        "target": msg["content"]["target"],
                                        #"token": self.target,
                                        "value":los }})
        elif msg["content"]["command"] == "scan request":
            if "service" in msg["content"]["value"]:
                if isinstance(msg["content"]["value"]["service"],list):
                    for serv in msg["content"]["value"]["service"]:
                        if serv in self.browsers:
                            self.send_service_status(serv)
                        else:
                            try:
                                self.browsers[serv] = ServiceBrowser(self.zeroconf,serv,listener=MyService())
                            except:
                                pass
                else:
                    serv = msg["content"]["value"]["service"]
                    if serv in self.browsers:
                        self.send_service_status(serv)
                    else:
                        try:
                            self.browsers[serv] = ServiceBrowser(self.zeroconf,serv,listener=MyService())
                        except:
                            pass

        # else:
            # for aconn in self.devices:
                # aconn.process(msg)

    def process_response(self, msg):
        if self.state == "init" and msg["content"]["response"] == "configuration" and msg["subject"] == self.target:
            # Getting the config
            newconfig = {}
            fromconfig = []
            if msg["content"]["configuration"]:
                try:
                    storedconfig = bl.decrypt(
                        msg["content"]["configuration"],
                        self.config["buddykey"])
                    if self.config["debug"]:
                        self.log.debug(
                            "The config stored is {}".format(storedconfig))
                except:
                    storedconfig = {}
                    savenew = True
                    # log
                    if self.log:
                        self.log.warning("Config is mangled")
                    else:
                        print("Config is mangled")

                for x in storedconfig:
                    self.scanner_config[x] = storedconfig[x]

            self.config["database"] = msg["content"]["database"]
            if "configonly" in self.config and self.config["configonly"]:
                self.state = "wait config save"
            else:
                self.state = "active"
                self.build()
                self.zeroconf = Zeroconf(self.loop, iface=self.config["iface"])
                self.sending({"subject": "control" + "." + self.target,
                              "content_type": "request",
                              "content": {"request": "functions",
                                          "target": self.type,
                                          "subtype": self.subtype,
                                          #"token": self.target,
                                          "value": {"configs": [scanner_config, self.scanner_config]}}})
                self.sending({"subject": self.config["restricted"],
                              "content_type": "restricted event",
                              "content": {"event": "config updated",
                                          "target": self.target,
                                          "value": self.scanner_config}})

                #No need for events, we don't have any handler
                self.sending({"subject":"control","content": {"subject":self.type},"content_type":"mute events"})
                self.sending({"subject": self.target,
                              "content_type": "event",
                              "content": {"event": "new scanner",
                                          "target": self.target,
                                          "value": self.subtype}})

        elif msg["content"]["response"] == "save configuration" and msg["subject"] == self.target:
            if self.state == "active" and msg["content"]["status"] != "done":
                # log
                if self.log:
                    self.log.warning("Warning: Configuration was not saved.")
                else:
                    print("Warning: Configuration was not saved.")
            elif self.state == "wait config save":
                if msg["content"]["status"] == "done":
                    raise bl.Exit(0, "Configuration was saved")
                else:
                    raise bl.Exit(2, "Error: Configuration was not saved")
            else:
                self.sending({"subject": "control" + "." + self.target,
                              "content_type": "request",
                              "content": {"request": "functions",
                                          "target": self.type,
                                          "subtype": self.subtype,
                                          #"token": self.target,
                                          "value": {"configs": [scanner_config, self.scanner_config]}}})
                self.sending({"subject": self.config["restricted"],
                              "content_type": "restricted event",
                              "content": {"event": "config updated",
                                          "target": self.target,
                                          "value": self.scanner_config}})


        elif msg["content"]["response"] == "functions" and msg["subject"] == self.type+".functions":
            if msg["content"]["status"] != "done":
                if self.log:
                    self.log.warning("Warning: Something went wrong when registering with the server. We probably should stop.")
                else:
                    print("Warning: Something went wrong when registering with the server. We probably should stop.")
        else:
            if self.log:
                self.log.warning(
                    "Unknown response {} {} {}".format(msg["subject"],
                                                       msg["content_type"],
                                                       msg["content"]))
            else:
                print (
                    "Unknown response {} {} {}".format(msg["subject"],
                                                       msg["content_type"],
                                                       msg["content"]))

    def process_event(self, msg):
        # We can react to no event.
        # TODO
        return

    def build(self):
        self.sending({"subject": "control" + "." + self.target,
                      "content_type": "request",
                      "content": {"request": "functions",
                                  "target": self.type,
                                  "subtype": self.subtype,
                                  "value": {"functions": "", "configs": [scanner_config, self.scanner_config]}}})

        coro = partial(ScannerBridge.service_scanner, self)
        self.probe_service.append(aio.ensure_future(coro(), loop=self.loop))

    async def service_scanner(self):
        # Give time for things to settle
        await aio.sleep(2)
        # Here we actually start the probe
        while True:
            try:
                los=await ZeroconfServiceTypes.find(self.zeroconf);
            except:
                pass

            await aio.sleep(self.scanner_config["probe"])

    def send_service_status(self, servname):
        for knownserv, entity in  self.seen_service.items():
            if knownserv.endswith(servname):
                self.sending({"subject": self.target,
                            "content_type": "event",
                            "content": {"event": "service found",
                                        "target": self.target,
                                        "value": {"name":entity.name,"address":entity.address,
                                                  "port":entity.port,"properties":entity.decoded_properties,
                                                  "type":entity.type, "mac": entity.mac}}})

    async def register(self, entity):
        if entity.name not in self.seen_service or entity.address != self.seen_service[entity.name].address or entity.port != self.seen_service[entity.name].port:
            newprop={}
            for x,y in entity.properties.items():
                try:
                    newprop[x.decode()]=y.decode()
                except:
                    try:
                        newprop[x.decode()]=y
                    except:
                        newprop[x]=y
            entity.decoded_properties = newprop
            #Mac address if IPv4Address
            #if isinstance(ipaddress.ip_address(entity.address),ipaddress.IPv4Address):
            addrinfo=socket.getaddrinfo(entity.address, None)[0]
            if addrinfo[0] == socket.AF_INET: # IPv4
                #Cheat... uses arp command after a quick ping
                try:
                    cheat = await aio.create_subprocess_shell("ping -c 1 -t 5 "+entity.address,stdout=aio.subprocess.PIPE)
                    await cheat.wait()
                    cheat = await aio.create_subprocess_shell("arp -n|grep -w '"+entity.address+"'| awk '{ print $3 }'",stdout=aio.subprocess.PIPE)
                    mymac = await cheat.stdout.readline()
                    mymac = mymac.decode('utf-8').rstrip()
                    await cheat.wait()
                    #mymac=subprocess.getoutput("arp -n|grep -w '"+entity.address+"'| awk '{ print $3 }'")
                except Exception as e:
                    #print("oops {}: {}".format(e,e.__traceback__))
                    mymac=""
            else:
                try:
                    cheat = await aio.create_subprocess_shell("ip -6 neighbor show|grep -w '"+entity.address+"'| awk '{ print $5 }'",stdout=aio.subprocess.PIPE)
                    mymac = await cheat.stdout.readline()
                    mymac = mymac.decode('utf-8').rstrip()
                    await cheat.wait()
                except:
                    mymac=""
            if mymac == "":
                #Local?
                try:
                    for ifc in netifaces.interfaces():
                        loa = netifaces.ifaddresses(ifc)
                        for af in loa:
                            for addr in loa[af]:
                                if "addr" in addr and addr["addr"] == entity.address:
                                    mymac=loa[netifaces.AF_LINK][0]["addr"]
                                    break
                            if mymac:
                                break
                        if mymac:
                            break
                except Exception as e:
                    pass

            if mymac == "":
                self.log.debug(
                    "Could not figure out mac address for service {}".format(entity))
                return

            self.seen_service[ entity.name] = entity
            entity.mac = mymac
            self.sending({"subject": self.target,
                            "content_type": "event",
                            "content": {"event": "service found",
                                        "target": self.target,
                                        "value": {"name":entity.name,"address":entity.address,
                                                  "port":entity.port,"properties":entity.decoded_properties,
                                                  "type":entity.type, "mac": entity.mac}}})

            if self.config["debug"]:
                self.log.debug(
                    "Found new service {}".format(entity))

    async def unregister(self, name):
        if name in self.seen_service:
            entity = self.seen_service[name]
            self.sending({"subject": self.target,
                            "content_type": "event",
                            "content": {"event": "service gone",
                                        "target": self.target,
                                        "value": {"name":entity.name,"address":entity.address,
                                                  "port":entity.port,
                                                  "type":entity.type, "mac": entity.mac}}})
            del(self.seen_service[entity.name])



aboutstr = """<p>ScannerBuddy is an application scanning the LAN for services published using Avahi/Bonjour. Upon discovery of a new or modified
service, it will send a "service found" event. The value associated with the event is a dictionary with key "name", "type", "address", "mac", "port" and,
"properties". It will respond to "known services" commands, content.target should be the type.subtype of the requester. content.value should be
the type of service requested.</p>
<p class=\"bu-copyright\">&copy; 2017 Fran&ccedil;ois Wautier</p>
"""

iconstr = {}

cfgdefault = {
    "type": "scanner",
     "subtype": "scanner",
     "host": "localhost",
     "port": 8745,
     "credential": "",
     "ssl": "",
     "restricted": "guibridge",
     "iface": ""}


def configure():
    parser = argparse.ArgumentParser(
        description="Track scanner of people/pet/devices over the LAN.")
    # version="%prog " + __version__ + "/" + bl.__version__)
    parser.add_argument("-t", "--type", default=cfgdefault["type"],
                        help="The type of devices we handle. (default \"%s\")." % cfgdefault["type"])
    parser.add_argument("-s", "--subtype", default=cfgdefault["subtype"],
                        help="The specific subtype we manage. (default \"%s\")." % cfgdefault["subtype"])

    parser.add_argument("-a", "--host", default=cfgdefault["host"],
                        help="The host address of the server (default \"%s\")." % cfgdefault["host"])
    parser.add_argument("-p", "--port", type=int, default=cfgdefault["port"],
                        help="The port used by the server (default \"%s\")." % cfgdefault["port"])

    parser.add_argument("-c", "--config", default="/etc/autobuddy/scanner.cfg", type=argparse.FileType('r'),
                        help="Config file to use (default \"/etc/autobuddy/scanner.cfg\")")

    parser.add_argument("-i", "--iface", action="append", default=cfgdefault["iface"],
                        help="The interfaces to use (default all).")

    parser.add_argument("-V", "--credential", default=cfgdefault['credential'],
                        help="The credential used to verify authorization (default \"%s\")." % cfgdefault["credential"])
    parser.add_argument("-S", "--ssl", default="",
                        help="The directory where the file %s can be found." % (CERTFILE))
    parser.add_argument("-r", "--restricted", default=cfgdefault["restricted"],
                        help="Where to send \"restricted events\" (default \"%s\")." % cfgdefault["restricted"])
    parser.add_argument("-v", "--verbose", action="store_true", default=False,
                        help="Log warning messages")

    parser.add_argument("-C", "--configonly", default="",
                        help="Exit after the the configuration has been saved")
    parser.add_argument("-d", "--debug", action="count", default=0,
                        help="Log debug information (default False)")

    try:
        opts = parser.parse_args()
    except Exception as e:
        parser.error("Error: " + str(e))

    if opts.debug:
        logging.basicConfig(
            level=logging.DEBUG,
            format='%(levelname)7s: %(message)s',
            stream=sys.stderr,
        )
    elif opts.verbose:
        logging.basicConfig(
            level=logging.WARNING,
            format='%(levelname)7s: %(message)s',
            stream=sys.stderr,
        )
    else:
        logging.basicConfig(
            level=logging.CRITICAL,
            format='%(levelname)7s: %(message)s',
            stream=sys.stderr,
        )
    scannerlog = logging.getLogger('')
    scannercfg = {"debug": opts.debug}
    try:
    # if True:
        try:
            cfgdata = json.load(opts.config)
            opts.config.close()
        except:
            cfgdata = {}
            scannerlog.warning("Config file could not be opened.")

        # Definition
        for attr in cfgdefault:
            if opts.__getattribute__(attr) != cfgdefault[attr]:
                scannercfg[attr] = opts.__getattribute__(attr)
            elif attr in cfgdata:
                scannercfg[attr] = cfgdata[attr]
            else:
                scannercfg[attr] = opts.__getattribute__(attr)
            if opts.debug:
                scannerlog.debug("The %s is %s." % (attr,scannercfg[attr]))


        if scannercfg["ssl"] and not (os.path.isfile(scannercfg["ssl"] + "/" + CERTFILE)):
            scannerlog.critical("Encryption: Could not find {} .".format(
                scannercfg["ssl"] + "/" + CERTFILE))
            sys.exit()
        if opts.debug:
            if scannercfg["ssl"]:
                scannerlog.debug(
                    "The ssl certificates can be found in %s" %
                    scannercfg["ssl"])
            else:
                scannerlog.debug("The connection is not encrypted")

        if "buddykey" in cfgdata:
            scannercfg["buddykey"] = cfgdata["buddykey"]

        # Save hings
        if opts.configonly:

            if "buddykey" not in scannercfg:
                if opts.debug:
                    scannerlog.debug("Generating random key")
                scannercfg["buddykey"] = bl.keygen()
            try:
                del(scannercfg["debug"])
            except:
                pass
            with open(opts.configonly, "w") as cfile:
                json.dump(scannercfg, cfile)
            os.chmod(opts.configonly, 384)  # 0600
            sys.exit()

    except Exception as e:
        scannerlog.error("Error: %r" % e)
        sys.exit(-2)

    return (scannerlog, scannercfg)


if __name__ == "__main__":
    log, config = configure()
    log.info("Configured")
    loop = aio.get_event_loop()
    if config["debug"]:
        loop.set_debug(True)

    ## Let's find out what network and interface we have Linux
    #config["networks"] = {}
    #if config["lan"]:
        #p1 = subprocess.getoutput(
            #"ip route | sed '/via/d' | sed '/dev/!d' | sed '/src/!d'")
        #if config["debug"]:
            #log.debug("Received from the shell: {}".format(p1))
        #for aroute in p1.split("\n"):
            #allofit = [z for z in [y.strip()
                                   #for y in aroute.split(" ")] if z != ""]
            #netadd = ipaddress.IPv4Address(allofit[allofit.index("src") + 1])
            #network = ipaddress.IPv4Network(allofit[0])
            #dev = allofit[allofit.index("dev") + 1]
            #config["networks"][netadd] = [dev, network]

    if config["ssl"]:
        sslcontext = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,
                                                cafile=config["ssl"] + '/' + CERTFILE)

        sslcontext.check_hostname = False
    else:
        sslcontext = None
    connFuture = aio.Future()
    fac = loop.create_connection(
            partial(ScannerBridge,
                    loop,
                    connFuture,
                    config,
                    log),
            config["host"],
            config["port"],
            ssl=sslcontext)
    conn, bridgectl = loop.run_until_complete(fac)
    loop.call_soon(
        bridgectl.configrequest,
        {"about": {"ScannerBuddy": aboutstr},
         "display": iconstr})

    try:
        loop.run_until_complete(connFuture)
    except KeyboardInterrupt:
        print("\n", "Exiting at user's request")
    finally:
        for x in bridgectl.probe_service:
            x.set_result('done')
        for x in bridgectl.browsers.values():
            x.cancel()
        loop.run_until_complete(bridgectl.zeroconf.close())
        conn.close()
        loop.close()
