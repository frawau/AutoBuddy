#!/usr/bin/env python3
# -*- coding:utf-8 -*-
#
# Copyright (c) 2015 Fran√ßois Wautier
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
# of the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies
# or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
# IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE
#
# This application is simply a bridge application.
# This is where Zone and sub-zone are known and handled
# This is where persistance is done. Other application may
# query the persistance DB, but only here should object be created
# One could define different user/access right to enforce this.
#
# This application need only to know:
#                - The host address and port to serve on
#                - The DB url with credential
#                - The read only db credential for requesting clients
#
# Since all data exchanged via AMQP should be serialized with JSON, we use JSON format
# for the config file.
#
#
# Buddy can also persist information for other applications

import argparse
import sys
import traceback
import json
import asyncio as aio
import datetime as dt
import buddylib as bl
import logging
import functools
import os
import ssl
from collections import defaultdict, Mapping
from random import randint


__version__ = "0.10"
KEYFILE = "autobuddy.key"
CERTFILE = "autobuddy.crt"
ALWAYSSENTEVENT = ["gui refresh"] #Here some MUST SEND event

system_config = """
<buddyui version="0.1">
    <configuration name="System">
        <controlgroup type="list"  name="location" label="Location" widget="geolocation">
            <control type="slider" name="longitude" label="Longitude">
                <start>-180</start>
                <end>180</end>
                <increment>0.1</increment>
            </control>
            <control type="slider" name="latitude" label="Latitude">
                <start>-90</start>
                <end>90</end>
                <increment>0.1</increment>
            </control>
            <control type="spinner" name="altitude" label="Altitude">
                <start>-400</start>
                <end>5100</end>
                <increment>10</increment>
            </control>
        </controlgroup>
    </configuration>
</buddyui>
"""
system_config_default = {"location": {}}

def dict_update(d, u):
    for k, v in u.items():
        if isinstance(v, Mapping):
            d[k] = dict_update(d.get(k, {}), v)
        else:
            d[k] = v
    return d

def zone_of_interest(self, subject):
    # TODO  change to a regex... Now light.Home and light.Home Theatre  would
    # both match on Home zone
    split = subject.split(".")
    if split[0] == self.type and ".".join(split[1:]) == self.name:
        return True
    return False


def zone_process(self, msg):
    if msg["content_type"] == "command":
        ct = msg["content"]["target"]
        for device in self.devices:
            if ct == "zone" or ct == device.type:
                msg["content"]["target"] = device.type + "." + device.name
                myc.sending({"subject": device.type + "." + device.name,
                             "content_type": msg["content_type"],
                             "content": msg["content"]})
        # try:
        # restore oriinal target for further processing
        msg["content"]["target"] = ct
        if "propagate" in msg["content"] and msg["content"]["propagate"]:
            for szone in self.sub_zone:
                szone._process(
                    msg)  # Direcet into _process insteat of process because we need to avoind of_interest. Sub-zone won't match
        # except: pass
    return None

# Hop we go....
bl.Zone._process = zone_process
bl.Zone.of_interest = zone_of_interest


class BuddyPartner(aio.Protocol):

    """ A persistent client"""

    def __init__(self, controller, log):
        self.controller = controller
        self.log = log
        self.tokens = {}
        self.get_events = True
        super().__init__()

    def connection_made(self, transport):
        self.transport = transport
        self.addr = transport .get_extra_info('peername')
        self.ptask = None
        self.state = "Init"
        self.filter = "*"
        self.holdbuffer = ""

    def data_received(self, data):
        if len(data) != 0:
            # All messages are dictionaries... so we can parse the JSON to
            # seperate multiple objects
            mydata = self.holdbuffer + data.decode()
            self.holdbuffer = ""
            lvl = 0
            pdata = ""
            isesc = False
            for x in mydata:
                if isesc:
                    isesc = False
                    pdata += x
                    continue
                if x == "\\":
                    isesc = True
                    pdata += x
                    continue

                if x == "{":
                    lvl += 1
                elif x == "}":
                    lvl -= 1
                pdata += x
                if lvl == 0:
                    msg = json.loads(pdata)
                    pdata = ""
                    if self.log:
                        self.log.debug("Received: %r" % msg)
                    if self.state == "Init":
                        if msg["content_type"] == "authenticate" and msg["content"]["credential"] == self.controller.config["credential"]:
                            try:
                                self.filter = msg["content"][
                                    "subject"].split(".")
                                self.controller.loclients.append(self)
                                self.state = "Active"
                            except:
                                pass
                    elif self.state == "Active":
                        if msg["content_type"] == "mute events":
                            self.get_events = False
                        elif msg["content_type"] == "get events":
                            self.get_events = True
                        else:
                            if msg["content_type"] == "request":
                                self.tokens[
                                    msg["content"]["token"]] = dt.datetime.now()
                            self.controller.broadcast(msg, [self.addr])
            if pdata:
                self.log.info(
                    "Partially received: level{} {}||".format(lvl, pdata))
                self.holdbuffer = pdata

    def dosend(self, msg):
        if msg["content_type"] in ["response"]:
            if msg["content"]["token"] not in self.tokens:
                return
            if "to_be_continued" not in msg["content"] or not msg["content"]["to_be_continued"]:
                del(self.tokens[msg["content"]["token"]])
            else:
                #Keep the token going
                self.tokens[msg["content"]["token"]] = dt.datetime.now()
        if msg["content_type"] in ["command", "request", "restricted event"]:
            for x, y in zip(self.filter, msg["subject"].split(".")):
                if not y.startswith(x):
                    return
        if msg["content_type"] in ["event"]:
            if not self.get_events and msg["content"]["event"] not in ALWAYSSENTEVENT:
                return
        self.transport.write(json.dumps(msg).encode())
        if randint(1, 50) == 31:  # from time to time
            # clean
            comp = dt.datetime.now() - dt.timedelta(minutes=1)
            lot = list(self.tokens.keys())
            for x in lot:
                if self.tokens[x] < comp:
                    del(self.tokens[x])

    def connection_lost(self, error):
        self.state = "Closed"
        if self.log:
            self.log.warning("Lost Connection with {}".format(self.addr))
        super().connection_lost(error)


class Controller():

    """
    This is the main class that control the zones, create new objects, etc
    """

    def __init__(self):
        self.name = None
        self.config = {}
        self.pendingauth = {}
        self.about = {}
        self.display = {}
        self.log = None
        self.loclients = []

    def configure(self):
        self.default = {
            "type": "control",
            "host": "",
            "port": 8745,
            "credential": "",
            "ssl": ""}
        parser = argparse.ArgumentParser(
            description="Track the overall Buddy Home Automation ecosystem.")
        # version="%prog " + __version__ + "/" + bl.__version__)
        parser.add_argument(
            "-t", "--type", default=self.default["type"],
                        help="The type we are listening to (default \"%s\")." % self.default["type"])
        parser.add_argument(
            "-a", "--host", default=self.default["host"],
                        help="The host address used by the server (default \"%s\")." % self.default["host"])
        parser.add_argument(
            "-p", "--port", type=int, default=self.default["port"],
                        help="The port used by the server (default \"%s\")." % self.default["port"])
        parser.add_argument(
            "-c", "--config", default="/etc/autobuddy/config.cfg",
                        help="Config file to use (default \"/etc/autobuddy/config.cfg\")")
        parser.add_argument("-C", "--configonly",
                            help="create/update a config file")
        parser.add_argument(
            "-d", "--debug", action="store_true", default=False,
                        help="Log debug information (default False)")
        parser.add_argument(
            "-D", "--database", default="",
                        help="connect to the specified DB"),
        parser.add_argument(
            "-H", "--heartbeat", type=int, default=60,
                        help="number of seconds between heartbeat messages. (default 60)"),
        parser.add_argument(
            "-i", "--initial", action="store_true", default=False,
                        help="create the Zone if it does not exist.")
        parser.add_argument(
            "-r", "--dbronly", default="",
                        help="credentials for readonly access to DB (<name>:<password>")
        parser.add_argument(
            "-S", "--ssl", default="",
                        help="The directory where the files %s and %s can be found." % (KEYFILE, CERTFILE))
        parser.add_argument(
            "-v", "--verbose", action="store_true", default=False,
                        help="Log warning messages")
        parser.add_argument(
            "-V", "--credential", default=self.default['credential'],
                        help="The credential used to verify authorization (default \"%s\")." % self.default["credential"])
        parser.add_argument(
            "-z", "--zone", default="",
                        help="The zone we want to control")
        try:
            opts = parser.parse_args()
        except Exception as e:
            print("Error: ", e)
            parser.print_help()
            sys.exit(-2)

        buddycfg = {}
        if opts.debug:
            logging.basicConfig(
                level=logging.DEBUG,
                format='%(levelname)7s: %(message)s',
                stream=sys.stderr,
            )
            self.log = logging.getLogger('')
        elif opts.verbose:
            logging.basicConfig(
                level=logging.WARNING,
                format='%(levelname)7s: %(message)s',
                stream=sys.stderr,
            )
            self.log = logging.getLogger('')
        else:
            logging.basicConfig(
                level=logging.CRITICAL,
                format='%(levelname)7s: %(message)s',
                stream=sys.stderr,
            )
            self.log = logging.getLogger('')

        buddycfg = {"debug": self.log}

        # try:
        if True:
            try:
                with open(opts.config, "r") as cfile:
                    cfgdata = json.load(cfile)
                self.config["config"] = opts.config
            except:
                if opts.configonly:
                    print (
                        "Warning: configuration file %s does not exist or contains garbage." %
                        opts.config)
                    cfgdata = {}
                else:
                    open(opts.config, "r")

            if opts.database:
                buddycfg["database"] = opts.database
            else:
                buddycfg["database"] = cfgdata["database"]["driver"] + "://"
                if "user" in cfgdata["database"] and cfgdata["database"]["user"]:
                    buddycfg[
                        "database"] += cfgdata[
                            "database"][
                                "user"] + ":" + cfgdata[
                                    "database"][
                                        "password"] + "@"
                buddycfg["database"] += cfgdata["database"]["host"]

                if "port" in cfgdata["database"] and cfgdata["database"]["port"]:
                    buddycfg["database"] += ":" + str(
                        cfgdata["database"]["port"])
                buddycfg["database"] += "/" + cfgdata["database"]["db"]

            if opts.debug:
                self.log.debug("The database is %r" % buddycfg["database"])

            if opts.dbronly:
                buddycfg[
                    "dbronly"] = cfgdata[
                        "database"][
                            "driver"] + "://" + opts.dbronly
                buddycfg["dbronly"] += "@" + cfgdata["database"]["host"]
                if "port" in cfgdata["database"] and cfgdata["database"]["port"]:
                    buddycfg["dbronly"] += ":" + str(
                        cfgdata["dbronly"]["port"])
                buddycfg["dbronly"] += "/" + cfgdata["database"]["db"]
            else:
                buddycfg["dbronly"] = cfgdata["database"]["driver"] + "://"
                if "user" in cfgdata["dbronly"] and cfgdata["dbronly"]["user"]:
                    buddycfg[
                        "dbronly"] += cfgdata[
                            "dbronly"][
                                "user"] + ":" + cfgdata[
                                    "dbronly"][
                                        "password"] + "@"
                buddycfg["dbronly"] += cfgdata["database"]["host"]

                if "port" in cfgdata["database"] and cfgdata["database"]["port"]:
                    buddycfg["dbronly"] += ":" + str(
                        cfgdata["dbronly"]["port"])
                buddycfg["dbronly"] += "/" + cfgdata["database"]["db"]

            if opts.debug:
                self.log.debug("The dbronly is %r" % buddycfg["dbronly"])

            if "buddykey" in cfgdata:
                buddycfg["buddykey"] = cfgdata["buddykey"]

            buddycfg["hb"] = opts.heartbeat
            if opts.debug:
                self.log.debug("The heartbeat interval is %r" % buddycfg["hb"])

            if opts.type != self.default["type"]:
                buddycfg["type"] = opts.type
            elif "type" in cfgdata:
                buddycfg["type"] = cfgdata["type"]
            else:
                buddycfg["type"] = self.default["type"]
            if opts.debug:
                self.log.debug("The type is %s" % buddycfg["type"])

            if opts.credential != self.default["credential"]:
                buddycfg["credential"] = opts.credential
            elif "credential" in cfgdata:
                buddycfg["credential"] = cfgdata["credential"]
            else:
                buddycfg["credential"] = self.default["credential"]
            if opts.debug:
                self.log.debug("The credential is %s" % buddycfg["credential"])

            if opts.port != self.default["port"]:
                buddycfg["port"] = opts.port
            elif "port" in cfgdata:
                buddycfg["port"] = cfgdata["port"]
            else:
                buddycfg["port"] = self.default["port"]
            if opts.debug:
                self.log.debug("The port is %s" % (buddycfg["port"]))

            if opts.host != self.default["host"]:
                buddycfg["host"] = opts.host
            elif "host" in cfgdata:
                buddycfg["host"] = cfgdata["host"]
            else:
                buddycfg["host"] = self.default["host"]
            if opts.debug:
                self.log.debug("The host is %s" % buddycfg["host"])

            if opts.ssl != self.default["ssl"]:
                buddycfg["ssl"] = opts.ssl
            elif "ssl" in cfgdata:
                buddycfg["ssl"] = cfgdata["ssl"]
            else:
                buddycfg["ssl"] = self.default["ssl"]

            if buddycfg["ssl"] and not (os.path.isfile(buddycfg["ssl"] + "/" + KEYFILE) and
                                        os.path.isfile(buddycfg["ssl"] + "/" + CERTFILE)):
                self.log.critical("Encryption disabled: Could not find {} or/nor {}".format(
                    buddycfg["ssl"] + "/" + KEYFILE,
                    buddycfg["ssl"] + "/" + CERTFILE))
                sys.exit()
            if opts.debug:
                if buddycfg["ssl"]:
                    self.log.debug(
                        "The ssl key and certificates can be found in %s" %
                        buddycfg["ssl"])
                else:
                    self.log.debug("The connection is not encrypted")

            if opts.zone:
                buddycfg["zone"] = opts.zone
            else:
                buddycfg["zone"] = cfgdata["zone"]
            buddycfg["create zone"] = opts.initial

            if opts.debug:
                self.log.debug("The zone is %r" % buddycfg["zone"])

            if opts.configonly:
                newconfig = {"port": buddycfg["port"], "host": buddycfg[
                    "host"],"type": buddycfg["type"],"ssl": buddycfg["ssl"] }

                if buddycfg["dbronly"]:
                    userpass = buddycfg["dbronly"].split("://")[-1]
                    userpass = userpass.split("@")[0]
                    newconfig["dbronly"] = {"user": userpass.split(":")[0]}
                    if ":" in userpass:
                        newconfig["dbronly"][
                            "password"] = userpass.split(":")[1]
                newconfig["database"] = {}
                newconfig["database"]["driver"] = buddycfg[
                    "database"].split("://")[0]
                remain = buddycfg["database"].split("://")[1]
                userpass = remain.split("@")[0]
                newconfig["database"]["user"] = userpass.split(":")[0]
                if ":" in userpass:
                    newconfig["database"]["password"] = userpass.split(":")[1]
                remain = remain.split("@")[1]
                dbname = remain.split("/")[1]
                newconfig["database"]["db"] = dbname
                remain = remain.split("/")[0]
                newconfig["database"]["host"] = remain.split(":")[0]
                if ":" in remain:
                    newconfig["database"]["port"] = remain.split(":")[1]
                newconfig["zone"] = buddycfg["zone"]
                if "buddykey" in buddycfg:
                    newconfig["buddykey"] = buddycfg["buddykey"]
                else:
                    if opts.debug:
                        self.log.debug("Generating random key")
                    newconfig["buddykey"] = bl.keygen()
                if "credential" in buddycfg:
                    newconfig["credential"] = buddycfg["credential"]
                else:
                    if opts.debug:
                        self.log.debug("Generating random key")
                    newconfig["credential"] = bl.keygen()

                with open(opts.configonly, "w") as cfile:
                    json.dump(newconfig, cfile)
                os.chmod(opts.configonly, 384)
                print("The configuration has been saved")
                try:
                    sess = bl.getSession(buddycfg["database"])
                    bl.initialize(sess)
                except:
                    print("Database could not be created")
                sys.exit(0)

        # except Exception as e:
            # print("Error:",e)
            # sys.exit(-2)

        buddycfg["debug"] = self.log
        self.config = buddycfg

    def build(self):
        sess = bl.getSession(self.config["database"])
        self.DBSession = sess
        try:
            self.Zone = sess.query(
                bl.Zone).filter_by(
                    name="zone-BuddyRoot").one(
            )
        except Exception as e:
            if self.config["create zone"]:
                try:
                    nzone = bl.Zone()
                    nzone.name = "zone-BuddyRoot"
                    nzone.nickname = self.config["zone"]
                    sess.add(nzone)
                    sess.commit()
                    self.Zone = nzone
                except:
                    self.log.debug(
                        "Error: Cannot initial zone",
                        self.config["zone"],
                        " Is it already defined?")
                    sys.exit(-3)
            else:
                self.log.debug(
                    "Error: Cannot unambiguously find zone",
                    self.config["zone"])
                sys.exit(-3)

        self.allZones = self.Zone.allNames()
        self.allFunctions = defaultdict(dict)  # Devices not located
        lofunc = sess.query(bl.BuddyFunction).all()
        for x in lofunc:
            self.allFunctions[x.type][x.subtype] = x.functions
        self.allConfigs = defaultdict(dict)
        self.allCommands = defaultdict(dict)
        try:
            loconf = sess.query(
                bl.BuddyProperty).filter_by(
                    entity="System").filter_by(
                        name="configuration").one(
            )
            storedvalue = bl.decrypt(loconf.values, self.config["buddykey"])
            for k, v in storedvalue.items():
                system_config_default[k] = v
        except:
            pass
        self.allConfigs[
            "System"][
                "configuration"] = [
            system_config,
             system_config_default]
        # sess.close()

    def connect(self):
        self.loop = aio.get_event_loop()
        if self.config["debug"]:
            self.loop.set_debug(True)
        if self.config["ssl"]:
            # try:
            sslcontext = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)
            sslcontext.load_cert_chain(
                self.config["ssl"] + '/' + CERTFILE,
                self.config["ssl"] + '/' + KEYFILE)
            # except:
                # self.log.warning("SSL keys and certificates could not be found")
                # sslcontext=None
        else:
            sslcontext = None
        roserver = self.loop.create_server(
            functools.partial(BuddyPartner,
                              self,
                              self.log),
            self.config["host"],
            self.config["port"],
            ssl=sslcontext)
        server = self.loop.run_until_complete(roserver)
        cleantask = self.loop.create_task(self.cleanup())
        return self.loop, server, cleantask

    async def cleanup(self):
        while True:
            idx = len(self.loclients)
            while idx:
                idx -= 1
                if self.loclients[idx].state == "Closed":
                    xx = self.loclients.pop(idx)
                    del(xx)
            await aio.sleep(60)

    def MsgProcess(self, msg):
        if msg["content_type"] == "command" and msg["subject"].split(".")[0] == "zone":
            # Just echo the command
            loz = [self.Zone]
            nloz = []
            while loz:
                for sz in loz:
                    sz.process(msg)
                    nloz += sz.sub_zone
                loz = nloz
                nloz = []
        elif msg["content_type"] == "command" and msg["subject"] == "System.configuration":
            if msg["content"]["command"] == "update config":
                for k, v in msg["content"]["value"].items():
                    system_config_default[k] = v
                try:
                    sess = self.DBSession
                    myconfig = sess.query(
                        bl.BuddyProperty).filter_by(
                            name="configuration")
                    myconfig = myconfig.filter_by(entity="System").one()
                except:
                    myconfig = bl.BuddyProperty()
                    myconfig.entity = "System"
                    myconfig.name = "configuration"
                    sess.add(myconfig)
                myconfig.values = bl.encrypt(
                    system_config_default,
                    self.config["buddykey"])
                try:
                    sess.commit()
                    self.sending({"subject": "System",
                                  "content_type": "event",
                                  "content": {"event": "config updated",
                                              "target": "System.configuration",
                                              "value": system_config_default}})
                except:
                    self.sending({"subject": "System",
                                  "content_type": "event",
                                  "content": {"event": "Error",
                                              "target": "System.configuration",
                                              "value": "Config could not be saved"}})
        elif msg["subject"].split(".")[0] == "control":
            try:
                if msg["content_type"] == "request":
                    sess = self.DBSession
                    if msg["content"]["request"] == "configuration":
                        cfgname = "configuration"
                        if "value" in msg["content"] and "config name" in msg["content"]["value" ]:
                            cfgname = msg["content"]["value" ]["config name"]
                        try:
                            myconfig = sess.query(bl.BuddyProperty)
                            myconfig = myconfig.filter_by(name=cfgname)
                            if len(msg["content"]["target"].split(".")) > 1:
                                myconfig = myconfig.filter_by(
                                    entity=msg["content"]["target"].split(".")[1].split("-")[0]).one()
                            else:
                                myconfig = myconfig.filter_by(
                                    entity=msg["content"]["target"].split("-")[0]).one()
                            cfgdata = myconfig.values
                        except:
                            cfgdata = ""
                        self.sending(
                            {"subject": msg["content"]["target"],  # +"."+msg["subject"].split(".")[1],
                             "content_type": "response",
                             "content": {"response": "configuration",
                                         "token":
                                         msg["content"]["token"],
                                         "database":
                                         self.config["dbronly"],
                                         "status": "done",
                                         "system configuration":
                                         system_config_default,
                                         "configuration": cfgdata}})
                        # See what's in it form me
                        if "value" in msg["content"]:
                            msgval = {}
                            # TODO generalize this
                            if "about" in msg["content"]["value"]:
                                self.about.update(
                                    msg["content"]["value"]["about"])
                                msgval[
                                    "about"] = msg[
                                        "content"][
                                            "value"][
                                                "about"]
                            if "display" in msg["content"]["value"]:
                                self.display = dict_update(self.display,
                                    msg["content"]["value"]["display"])
                                msgval[
                                    "display"] = msg[
                                        "content"][
                                            "value"][
                                                "display"]
                            if msgval:
                                self.sending(
                                    {"subject": msg["content"]["target"],  # +"."+msg["subject"].split(".")[1],
                                     "content_type": "event",
                                     "content": {"event": "gui info",
                                                 "value": msgval}})

                    elif msg["content"]["request"] == "save configuration":
                        cfgname = "configuration"
                        if "config name" in msg["content"]:
                            cfgname = msg["content"]["config name"]
                        try:
                            myconfig = sess.query(bl.BuddyProperty)
                            myconfig = myconfig.filter_by(name=cfgname)
                            myconfig = myconfig.filter_by(
                                entity=msg["subject"].split(".")[1]).one()
                        except:
                            myconfig = bl.BuddyProperty()
                            myconfig.name = cfgname
                            myconfig.entity = msg["subject"].split(".")[1]
                            sess.add(myconfig)
                        myconfig.values = msg["content"]["value"]
                        try:
                            sess.commit()
                            sts = True
                        except:
                            sts = False
                        self.sending(
                            {"subject": msg["content"]["target"] + "." + msg["subject"].split(".")[1],
                             "content_type": "response",
                             "content": {"response": "save configuration",
                                         "token":
                                         msg["content"]["token"],
                                         "status": (sts and "done") or "failed"}})

                    elif msg["content"]["request"] == "save property":
                        try:
                            myprop = sess.query(bl.BuddyProperty)
                            myprop = myprop.filter_by(
                                entity=msg["content"]["target"])
                            myprop = myprop.filter_by(
                                name=msg["content"]["name"]).one()
                        except:
                            myprop = bl.BuddyProperty()
                            myprop.entity = msg["content"]["target"]
                            myprop.name = msg["content"]["name"]
                            sess.add(myprop)
                        myprop.values = msg["content"]["value"]
                        try:
                            sess.commit()
                            sts = True
                        except:
                            sts = False
                        self.sending(
                            {"subject": msg["subject"].split(".")[1] + "." + msg["content"]["target"],
                             "content_type": "response",
                             "content": {"response": "save property",
                                         "name": myprop.name,
                                         "token":
                                         msg["content"]["token"],
                                         "status": (sts and "done") or "failed"}})

                    elif msg["content"]["request"] == "get property":
                        result = {}
                        myprop = sess.query(bl.BuddyProperty)
                        myprop = myprop.filter_by(
                            entity=msg["content"]["target"])
                        if "name" in msg["content"] and msg["content"]["name"]:
                            myprop = myprop.filter_by(
                                name=msg["content"]["name"])
                        lop = myprop.all()
                        for x in lop:
                            if x.name != "configuration":
                                result[x.name] = x.values

                        self.sending(
                            {"subject": msg["subject"].split(".")[1] + "." + msg["content"]["target"],
                             "content_type": "response",
                             "content": {"response": "get property",
                                         "token":
                                         msg["content"]["token"],
                                         "value": result,
                                         "status": "done"}})

                    elif msg["content"]["request"] == "creation":
                        newent = getattr(bl, msg["content"]["target"])()
                        for x in msg["content"]["value"]:
                            setattr(newent, x, msg["content"]["value"][x])
                        sess.add(newent)
                        newent.location = self.Zone
                        try:
                            sess.commit()
                            sts = True
                        except:
                            sts = False
                        self.sending(
                            {"subject": msg["content"]["target"] + "." + newent.name,
                             "content_type": "response",
                             "content": {"response": "creation",
                                         "token":
                                         msg["content"]["token"],
                                         "status": (sts and "done") or "failed"}})

                    elif msg["content"]["request"] == "deletion":
                        mytype = getattr(bl, msg["content"]["target"])
                        try:
                            thisdev = sess.query(mytype).filter_by(
                                name=msg["content"]["value"]).one()
                            mysubtype = thisdev.subtype
                            sess.delete(thisdev)
                            if "purge" in msg["content"] and msg["content"]["purge"]:
                                sess.delete(thisdev.functions)
                            sess.commit()
                            sts = True
                        except:
                            sts = False

                        # TODO clean functions, config and commands

                        self.sending(
                            {"subject": msg["content"]["target"] + "." + msg["content"]["value"],
                             "content_type": "response",
                             "content": {"response": "deletion",
                                         "token":
                                         msg["content"]["token"],
                                         "status": (sts and "done") or "failed"}})

                    elif msg["content"]["request"] == "define device":
                        try:
                            device = self.getDevice(
                                msg["content"]["value"]["name"])
                            thisval = {"name": device.name}
                            thisval["nickname"] = device.nickname
                            thisval["type"] = device.type
                            thisval["subtype"] = device.subtype
                            thisval["zone"] = device.location.name
                            sts = True
                        except:
                            sts = False
                            thisval = {}
                        self.sending(
                            {"subject": msg["content"]["target"] + "." + device.name,
                             "content_type": "response",
                             "content": {"response": "define device",
                                         "token":
                                         msg["content"]["token"],
                                         "status":
                                         (
                                             sts and "done") or "failed",
                                         "value": thisval}})
                    elif msg["content"]["request"] == "nickname":
                        # TODEL mytype=getattr(bl,msg["content"]["target"])
                        try:
                            device = self.getDevice(
                                msg["content"]["value"]["name"])
                            device.nickname = msg[
                                "content"][
                                    "value"][
                                        "nickname"]
                            sess.commit()
                            sts = True
                        except:
                            sts = False
                        self.sending({"subject": msg["content"]["target"],
                                      "content_type": "response",
                                      "content": {"response": "nickname",
                                                  "value": msg[
                                                  "content"][
                                                  "value"][
                                                  "nickname"],
                                                  "token":
                                                  msg["content"]["token"],
                                                  "status": (sts and "done") or "failed"}})

                    elif msg["content"]["request"] == "functions":
                        sts = True
                        if "functions" in msg["content"]["value"]:
                            try:
                                myent = sess.query(bl.BuddyFunction).\
                                    filter_by(type=msg["content"]["target"]).\
                                        filter_by(
                                            subtype=msg[
                                                "content"][
                                                    "subtype"]).one(
                                )
                                if myent.functions != msg["content"]["value"]:
                                    myent.functions = msg[
                                        "content"][
                                            "value"][
                                                "functions"]
                            except:
                                myent = bl.BuddyFunction()
                                myent.type = msg["content"]["target"]
                                myent.subtype = msg["content"]["subtype"]
                                sess.add(myent)
                                # for x in msg["content"]["value"]:
                                    # setattr(myent,x,msg["content"]["value"][x])

                            self.allFunctions[
                                myent.type][
                                    myent.subtype] = msg[
                                        "content"][
                                            "value"][
                                                "functions"]
                            try:
                                sess.commit()
                            except:
                                sess.rollback()
                                sts = False
                        if "configs" in msg["content"]["value"]:
                            self.allConfigs[msg["content"]["target"]][
                                msg["content"]["subtype"]] = msg["content"]["value"]["configs"]
                        if "module commands" in msg["content"]["value"]:
                            for k in msg["content"]["value"]["module commands"]:
                                self.allCommands[msg["content"]["subtype"]][
                                    k] = msg["content"]["value"]["module commands"][k]
                        self.sending(
                            {"subject": msg["content"]["target"] + ".functions",
                             "content_type": "response",
                             "content": {"response": "functions",
                                         "token":
                                         msg["content"]["token"],
                                         "status": (sts and "done") or "failed"}})

                    elif msg["content"]["request"] == "zone creation":
                        pzone = self.getZone(msg["content"]["value"]["parent"])
                        del(msg["content"]["value"]["parent"])
                        czone = bl.Zone()
                        for x in msg["content"]["value"]:
                            setattr(czone, x, msg["content"]["value"][x])
                        czone.parent = pzone
                        sess.add(czone)
                        try:
                            sess.commit()
                            sts = True
                        except:
                            sts = False
                        self.sending(
                            {"subject": msg["content"]["target"] + "." + czone.name,
                             "content_type": "response",
                             "content": {"response": "zone creation",
                                         "token":
                                         msg["content"]["token"],
                                         "target": msg[
                                             "content"][
                                         "target"] +
                                         "." +
                                         czone.name,
                                         "status": (sts and "done") or "failed"}})
                        if sts:
                            self.sending({"subject": "zone" + "." + czone.name,
                                          "content_type": "event",
                                          "content": {"event": msg["content"]["request"],
                                                      "target": "zone." +
                                                      czone.name,
                                                      "value": {"nickname": czone.nickname, "parent": pzone.name}}})

                    elif msg["content"]["request"] == "zone deletion":
                        # print "Got Delete",msg
                        czone = self.getZone(msg["content"]["value"]["name"])
                        lodevs = czone.allDevices()
                        cname = czone.name
                        sess.delete(czone)
                        for x in lodevs:
                            x.location = self.Zone
                        try:
                            sess.commit()
                            sts = True
                        except:
                            sts = False
                        self.sending(
                            {"subject": msg["content"]["target"] + "." + cname,
                             "content_type": "response",
                             "content": {"response": "zone deletion",
                                         "token":
                                         msg["content"]["token"],
                                         "status":
                                         (
                                             sts and "done") or "failed",
                                         "target":
                                         msg["content"][
                                         "target"] + "." + cname,
                                         "name": msg["content"]["value"]["name"]}})
                        if sts:
                            self.sending({"subject": "zone" + "." + czone.name,
                                          "content_type": "event",
                                          "content": {"event": msg["content"]["request"],
                                                      "target": "zone." +
                                                      czone.name,
                                                      "value": czone.name}})

                    elif msg["content"]["request"] in ["zone location"]:
                        # print "Got",msg
                        pzone = self.getZone(msg["content"]["value"]["parent"])
                        czone = self.getZone(msg["content"]["value"]["name"])
                        czone.parent = pzone
                        try:
                            sess.commit()
                            sts = True
                        except:
                            sts = False
                        self.sending(
                            {"subject": msg["content"]["target"] + "." + czone.name,
                             "content_type": "response",
                             "content": {"response": msg["content"]["request"],
                                         "token":
                                         msg["content"]["token"],
                                         "status":
                                         (
                                         sts and "done") or "failed",
                                         "target": msg[
                                         "content"][
                                         "target"] +
                                         "." +
                                         czone.name,
                                         "name": (sts and czone.name) or ""}})
                        if sts:
                            self.sending({"subject": "zone" + "." + czone.name,
                                          "content_type": "event",
                                          "content": {"event": msg["content"]["request"],
                                                      "target": "zone." +
                                                      czone.name,
                                                      "value": {"parent": pzone.name}}})

                    elif msg["content"]["request"] in ["zone nickname"]:
                        # print "Got",msg
                        czone = self.getZone(msg["content"]["value"]["name"])
                        czone.nickname = msg["content"]["value"]["nickname"]
                        try:
                            sess.commit()
                            sts = True
                        except:
                            sts = False
                        self.sending(
                            {"subject": msg["content"]["target"] + "." + czone.name,
                             "content_type": "response",
                             "content": {"response": msg["content"]["request"],
                                         "token":
                                         msg["content"]["token"],
                                         "status":
                                         (
                                         sts and "done") or "failed",
                                         "target": msg[
                                         "content"][
                                         "target"] +
                                         "." +
                                         czone.name,
                                         "name": (sts and czone.nickname) or ""}})
                        if sts:
                            self.sending({"subject": "zone" + "." + czone.name,
                                          "content_type": "event",
                                          "content": {"event": msg["content"]["request"],
                                                      "target": "zone." +
                                                      czone.name,
                                                      "value": {"nickname": czone.nickname}}})

                    elif msg["content"]["request"] == "device location":
                        pzone = self.getZone(msg["content"]["value"]["parent"])
                        if pzone:
                            device = None
                            idx = 0
                            if not device:
                                device = self.getDevice(
                                    msg["content"]["value"]["name"])
                            if device:
                                device.location = pzone
                            try:
                                sess.commit()
                                sts = True
                            except:
                                sts = False
                            self.sending(
                                {"subject": msg["content"]["target"] + "." + device.name,
                                 "content_type": "response",
                                 "content": {"response": "device location",
                                             "token":
                                             msg["content"][
                                             "token"],
                                             "target": msg[
                                                 "content"][
                                             "target"] +
                                             "." +
                                             device.name,
                                             "status": (sts and "done") or "failed"}})
                            if sts:
                                self.sending(
                                    {"subject": msg["content"]["target"] + "." + device.name,
                                     "content_type": "event",
                                     "content": {"event": msg["content"]["request"],
                                                 "target": msg[
                                                 "content"][
                                                 "target"] +
                                                 "." +
                                                 device.name,
                                                 "value": {"parent": pzone.name}}})

                    elif msg["content"]["request"] == "system state":
                        # print msg
                        pzone = self.getZone(
                            msg["content"]["value"]["zone"] or self.Zone.name)
                        # print "Building for
                        # ",pzone,msg["content"]["value"]["zone"] or
                        # self.Zone.name
                        resu = {"name": ".",
                                "devices": {},
                                "sub_zone": [],
                                "functions": {},
                                "configs": {}}

                        for ftype in self.allFunctions:
                            if ftype not in resu["functions"]:
                                resu["functions"][ftype] = {}
                            for fstype in self.allFunctions[ftype]:
                                resu[
                                    "functions"][
                                        ftype][
                                            fstype] = self.allFunctions[
                                                ftype][
                                                    fstype]

                        for ftype in self.allConfigs:
                            if ftype not in resu["configs"]:
                                resu["configs"][ftype] = {}
                            for fstype in self.allConfigs[ftype]:
                                resu[
                                    "configs"][
                                        ftype][
                                            fstype] = self.allConfigs[
                                                ftype][
                                                    fstype]

                        if self.allCommands:
                            resu["module commands"] = self.allCommands

                        if self.about:
                            resu["about"] = self.about
                        if self.display:
                            resu["display"] = self.display

                        resu["sub_zone"].append(pzone.toDict())
                        self.sending({"subject": msg["content"]["target"],
                                      "content_type": "response",
                                      "content": {"response": "system state",
                                                  "token":
                                                  msg["content"]["token"],
                                                  "status": "done",
                                                  "value": resu}})

            except Exception as e:
                self.log.critical(
                    "Bloody problem with {}:\n".format(msg),
                    exc_info=(type(e),
                              e,
                              e.__traceback__))

        else:
            self.log.debug("Unprocessed message {}".format(msg))
            pass

    def broadcast(self, msg, skip=[]):
        self.sending(msg, skip)
        if "Controller" not in skip:
            self.MsgProcess(msg)

    def sending(self, msg, skip=[]):
        self.log.debug("Sending {}".format(msg))
        for c in self.loclients:
            if c.state == "Active" and c.addr not in skip:
                c.dosend(msg)

    def dbhb(self):
        xx = self.DBSession.query(bl.Zone).filter_by(
            name="supercalifragilisticexpialedocious").all()

    def getZone(self, name):
        loz = [self.Zone]
        nloz = []
        while loz:
            for sz in loz:
                if sz.name == name:
                    return sz
                nloz += sz.sub_zone
            loz = nloz
            nloz = []
        return None

    def getDevice(self, name):
        loz = [self.Zone]
        nloz = []
        while loz:
            for sz in loz:
                for device in sz.devices:
                    if device.name == name:
                        return device
                nloz += sz.sub_zone
            loz = nloz
            nloz = []
        return None

if __name__ == "__main__":
    myc = Controller()
    myc.configure()
    myc.build()
    try:
        loop, server, task = myc.connect()
        loop.run_forever()
    except KeyboardInterrupt:
        print("\n", "Exiting at user's request")
    finally:
        # Close the server
        server.close()
        task.cancel()
        loop.run_until_complete(server.wait_closed())
        loop.close()
