#!/usr/bin/env python3
# -*- coding:utf-8 -*-
#
# Copyright (c) 2015 Fran√ßois Wautier
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
# of the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies
# or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
# IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE
###############################################################################
# initialy lifted from Autobahn and twisted matrix
###############################################################################
import sys
import argparse, json, random, traceback, logging, os, aiohttp, ssl, functools
import buddylib as bl
from aiohttp import web,WSCloseCode, log as aiohlog
import asyncio as aio
from copy import deepcopy

CERTFILE="autobuddy.crt"
WCERTFILE="autobuddy.crt"
WKEYFILE="autobuddy.key"
#WCERTFILE="socketbuddy.crt"
#WKEYFILE="socketbuddy.key"
__version__="0.10"

#class NamedEntity(object):
    #"""
    #Just defining objects with a name
    #"""
    #def __init__(self,name=None):
        #self.name=name
        #self.authtoken=None


#Generating evaluable expressions from hveiga @ stackoverflow
def expr(depth):
    if depth==1 or random.random()<1.0/(2**depth-1):
        return str(int(random.random() * 1000) )
    return '(' + expr(depth-1) + random.choice(['+','-','*','/']) + expr(depth-1) + ')'


def makeName(ws,length=16):
        name = 'ws-'
        for i in range(length):
            name += random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789')
        ws.name=name

async def websocket_handler(request):

    ws = web.WebSocketResponse()
    await ws.prepare(request)
    makeName(ws)
    sysctl.register(ws)
    async for msg in ws:
        sysctl.log.debug("RECV: on {}, {}".format(ws.name,msg))
        try:
            sysctl.msgfromWS(msg.json(),ws)
        except:
            pass

        if msg.type == aiohttp.WSMsgType.error:
            sysctl.log.debug('ws connection closed with exception %s' %
                  ws.exception())

    sysctl.unregister(ws)
    sysctl.log.warning('websocket connection closed')

    return ws



class GuiWSBridge(bl.BuddyBridge):
    """
    This is the bridge application. It will connect to the controller and will
    have WebSocket connections registered with it.
    """
    def __init__(self, loop,future,config,log):
        super(GuiWSBridge, self).__init__(loop,future,config,log)
        self.users={}
        self.user_config={}
        self.requestids= []
        self.tasks = []
        self.allowedsocket = set()
        self.adminsocket = set()

    #A bit different ....overiding
    def connection_made(self,transport):
        self.transport=transport
        self.sending({"subject":"control","content": {"credential":self.config["credential"],"subject":self.type},"content_type":"authenticate"})
        if "save user" in self.config and self.config["save user"]:
            if isinstance(self.config["save user"],dict):
                self.users={**self.config["save user"],**self.users}
                self.saveUsers()
        else:
            self.getUsers()
            self.getUserConf()


    def sendMessage(self, payload):
        self.sending(payload)

    def MsgProcess(self,msg):
        #Here all messages processed are coming from the controller
        if self.log:
            self.log.debug("RECV: {}".format( msg ) )

        #Let's filter the message we receive from the controller
        # Some may be for us.
        if msg["subject"].startswith(self.type):
            self.processMessage(msg)
        else:
            cleanmsg=msg
            #Forward to the connected gui clients
            #But first cleanup some responses
            if msg["content_type"] == "response":
                if msg["content"]["response"]=="functions":
                    cleanmsg=deepcopy(msg)
                    if "configs" in cleanmsg:
                        del(cleanmsg["configs"])
                    if "module commands" in cleanmsg:
                        del(cleanmsg["module commands"])
            if msg["content_type"] == "restricted event":
                cleanmsg=None
                msg["content_type"] = "event" #The GUI doesn't need to know

            for client in self.devices:
                try:
                    if client.name in self.allowedsocket:
                        if client.name in self.adminsocket:
                            aio.ensure_future(client.send_json(msg))
                        else:
                            if cleanmsg:
                                aio.ensure_future(client.send_json(cleanmsg))
                except:
                    pass

    def msgfromWS(self,msg,orig):
        try:
        #if True:
            if msg["content_type"] == "request" and msg["content"]["request"]=="login":
                # Perform authentication
                if msg["content"]["user"] in self.users and \
                   msg["content"]["password"] == self.users[msg["content"]["user"]][0]:
                    newmsg={"content_type":"response","subject":msg["content"]["target"],"content":{}}
                    newmsg["content"]["response"]="login"
                    newmsg["content"]["status"]= "done"
                    newmsg["content"]["zone"]= self.users[msg["content"]["user"]][1]
                    newmsg["content"]["token"]= msg["content"]["token"]
                    orig.user=msg["content"]["user"]
                    self.allowedsocket.add(orig.name)
                    newmsg["content"]["value"]= {}
                    if self.users[msg["content"]["user"]][1]=="admin":
                        self.adminsocket.add(orig.name)
                        newmsg["content"]["value"]["list of users"] = dict([(x,y[1]) for x,y in self.users.items()])
                    if msg["content"]["user"] in self.user_config:
                        newmsg["content"]["value"]["user config"] = self.user_config[msg["content"]["user"]]

                else:
                    newmsg={"content_type":"response","subject":msg["content"]["target"],"content":{}}
                    newmsg["content"]["response"]="login"
                    newmsg["content"]["status"]= "failed"
                    newmsg["content"]["token"]= msg["content"]["token"]
                aio.ensure_future(orig.send_json(newmsg))
            elif msg["content_type"] == "request" and msg["content"]["request"]=="change password":
                #print "Msg is",msg
                if msg["content"]["value"]["user"] in self.users and \
                   msg["content"]["value"]["password"] == self.users[msg["content"]["value"]["user"]][0]:
                    self.users[msg["content"]["value"]["user"]][0]=msg["content"]["value"]["new password"]
                self.saveUsers(token=msg["content"]["token"])
            elif msg["content_type"] == "request" and msg["content"]["request"]=="system state":
                #Make sure we request the right room
                if orig.name in self.adminsocket:
                    msg["content"]["value"]={"zone":""}
                else:
                    msg["content"]["value"]={"zone": self.users[orig.user][1]}
                self.sending(msg)
            elif msg["content_type"] == "request" and msg["content"]["request"]=="add user":
                if orig.name in self.adminsocket:
                    #do something
                    if "password" in msg["content"]["value"]:
                        self.users[msg["content"]["value"]["user"]] = [msg["content"]["value"]["password"],msg["content"]["value"]["zone"]]
                    else:
                        try:
                            self.users[msg["content"]["value"]["user"]][1]=msg["content"]["value"]["zone"]
                        except:
                            return
                    self.saveUsers(token=msg["content"]["token"])
            elif msg["content_type"] == "request" and msg["content"]["request"]=="delete user":
                if orig.name in self.adminsocket:
                    #do something
                    try:
                        del(self.users[msg["content"]["value"]["user"]])
                        self.saveUsers(token=msg["content"]["token"])
                    except:
                        return
            elif msg["content_type"] == "request" and msg["content"]["request"]=="save user config":
                for uid in msg["content"]["value"]:
                    self.user_config = { **self.user_config, **msg["content"]["value"]}
                self.saveUserConf(token=msg["content"]["token"])
            elif orig.name in self.allowedsocket or orig.name in self.adminsocket:
                self.sending(msg)

        except:
            self.log.warning ("Something's wrong! Probably a badly formated message",exc_info=(type(e), e, e.__traceback__))


    def processMessage(self,msg):
        if msg["content_type"] == "response":
            if msg["content"]["token"] in self.requestids:
                self.requestids.remove(msg["content"]["token"])
                if msg["content"]["response"]=="save property":
                    if msg["content"]["status"]=="failed":
                        sysctl.log.warning("Failed to save property.")#TODO send something
                elif msg["content"]["response"]=="get property":
                    if msg["content"]["status"]=="done":
                        for x,val in msg["content"]["value"].items():
                            theval=bl.decrypt(val,self.config["buddykey"])
                            cattr=getattr(self,x)
                            for y,v in theval.items():
                                cattr[y]=v
                            setattr(self,x,cattr)
        elif msg["content_type"] == "restricted event":
            #Restricted events only to admins
            msg["content_type"] = "event" #The GUI doesn't need to know
            for client in self.devices:
                try:
                    if client.name in self.allowedsocket:
                        if client.name in self.adminsocket:
                            aio.ensure_future(client.send_json(msg))
                except:
                    pass

    def register(self,gui):
        gui.log=self.log
        self.devices.append(gui)

    def unregister(self,gui):
        try:
            self.devices.remove(gui)
        except:
            pass
        try:
            self.allowedsocket.remove(gui.name)
        except:
            pass
        try:
            self.adminsocket.remove(gui.name)
        except:
            pass



    def saveUsers(self,token=None):
        msg={"content_type":"request","subject":"control.gui","content":{}}
        msg["content"]["request"]="save property"
        msg["content"]["target"]= self.type
        msg["content"]["token"] = token or bl.genid()
        self.requestids.append(msg["content"]["token"])
        msg["content"]["name"] = "users"
        msg["content"]["value"] = bl.encrypt(self.users,self.config["buddykey"])
        self.log.debug("SAVE: {}\n\n\n".format(msg))
        self.config["save user"]=False
        self.sendMessage(msg)

    def getUsers(self):
        newmsg={"content_type":"request","subject":"control."+self.type,"content":{}}
        newmsg["content"]["request"]="get property"
        newmsg["content"]["target"]= self.type
        newmsg["content"]["token"] = bl.genid()
        self.requestids.append(newmsg["content"]["token"])
        newmsg["content"]["name"]="users"
        msg = newmsg
        self.config["save user"]=False
        self.sendMessage(msg)


    def saveUserConf(self,token=None):
        msg={"content_type":"request","subject":"control.gui","content":{}}
        msg["content"]["request"]="save property"
        msg["content"]["target"]= self.type
        msg["content"]["token"] = token or bl.genid()
        self.requestids.append(msg["content"]["token"])
        msg["content"]["name"] = "user_config"
        msg["content"]["value"] = bl.encrypt(self.user_config,self.config["buddykey"])
        self.log.debug("SAVE: {}\n\n\n".format(msg))
        self.sendMessage(msg)

    def getUserConf(self):
        newmsg={"content_type":"request","subject":"control."+self.type,"content":{}}
        newmsg["content"]["request"]="get property"
        newmsg["content"]["target"]= self.type
        newmsg["content"]["token"] = bl.genid()
        self.requestids.append(newmsg["content"]["token"])
        newmsg["content"]["name"]="user_config"
        msg = newmsg
        self.sendMessage(msg)

cfgdefault={"broker":"localhost",
            "tls":False,
            "type":"gui",
            "credential":"",
            "application":"./html/buddyctrl.html","brokerport":8745,
            "host":"localhost",
            "port":8080,
            "ssl":""}
def configure():
    absolute=["tls","application"]
    parser = argparse.ArgumentParser(description="Autobuddy Websocket bridge.")
    #                            version="%prog " + __version__ + "/" + bl.__version__)
    parser.add_argument("-a", "--application", default=cfgdefault['application'],
                    help="The application to serve. (default \"%s\""%cfgdefault["application"])
    parser.add_argument("-b", "--broker", default=cfgdefault['broker'],
                    help="connect to specified controler host (default \"%s\")"%cfgdefault["broker"])
    parser.add_argument("-B", "--brokerport", default=cfgdefault["brokerport"], type=int,
                    help="On which port to listen to web sockets (default \"%s\")"%cfgdefault["brokerport"])
    parser.add_argument("-c", "--config", default="/etc/autobuddy/websocket.cfg",
                    help="Config file to use (default \"/etc/autobuddy/websocket.cfg\"")
    parser.add_argument("-C", "--configonly", default="",
                        help="Exit after the the configuration has been saved")
    parser.add_argument("-d", "--debug", action="count", default=0,
                    help="Log debug information (default False)")
    parser.add_argument("-H", "--host", default=cfgdefault["host"],
                    help="Host or IP address on which to listen for HTML requests. (default \"%s\""%cfgdefault["host"])
    parser.add_argument("-p", "--port", default=cfgdefault["port"], type=int,
                    help="On which port to listen to HTML requests (default \"%s\")"%cfgdefault["port"])
    parser.add_argument("-t", "--type",  default=cfgdefault["type"],
                    help="List of subject content to echo to websocket. (default \"%s\""%cfgdefault["type"])
    parser.add_argument("-S", "--ssl", default="",
                    help="The directory where the file %s can be found."%(CERTFILE))
    parser.add_argument("-T", "--tls", default=cfgdefault["tls"],
                    help="Use TLS with key (server.key) and certificat (server.crt) files in directory (default \"%s\")"%cfgdefault["tls"])
    parser.add_argument("-u", "--user",
                    help="Create an admin user")
    parser.add_argument("-v", "--verbose", action="store_true", default=False,
                    help="Log warning messages (default to False)")
    parser.add_argument("-V", "--credential", default='',
                    help="The credential used to verify authorization.")

    try:
        opts=parser.parse_args()
    except Exception as e:
        print("Error: ",e)
        parser.print_help()
        sys.exit(-2)

    if opts.debug:

        logging.basicConfig(
            level=logging.DEBUG,
            format='%(levelname)7s: %(message)s',
            stream=sys.stderr,
            )
    elif opts.verbose:
        logging.basicConfig(
            level=logging.WARNING,
            format='%(levelname)7s: %(message)s',
            stream=sys.stderr,
            )
    else:
        logging.basicConfig(
            level=logging.CRITICAL,
            format='%(levelname)7s: %(message)s',
            stream=sys.stderr,
            )
    guiwslog = logging.getLogger('')
    guiwscfg = {}
    try:
    #if True:
        try:
            with open(opts.config,"r") as cfile:
                cfgdata = json.load(cfile)
            guiwscfg["config"] = opts.config
        except:
            if opts.configonly:
                guiwslog.warning ("configuration file %s does not exist or contains garbage."%opts.config)
                cfgdata={}


        guiwscfg["save user"]=False

        for cfg in cfgdefault:
            if getattr(opts,cfg,False) and  getattr(opts,cfg) != cfgdefault[cfg]:
                guiwscfg[cfg] = getattr(opts,cfg)
            elif cfg in cfgdata:
                guiwscfg[cfg] = cfgdata[cfg]
            else:
                guiwscfg[cfg] = cfgdefault[cfg]
            if cfg in absolute:
                guiwscfg[cfg] = os.path.abspath(guiwscfg[cfg])
            if opts.debug:
                guiwslog.debug("%s is %s"%(cfg,guiwscfg[cfg]))

        guiwscfg["subtype"]="gui"

        if guiwscfg["ssl"] and not ( os.path.isfile(guiwscfg["ssl"]+"/"+CERTFILE)):
            guiwslog.critical("Encryption: Could not find {} .".format(
                guiwscfg["ssl"]+"/"+CERTFILE))
            sys.exit()

        if "buddykey" in cfgdata:
            guiwscfg["buddykey"] = cfgdata["buddykey"]

        if opts.configonly:
            newconfig={}
            for cfg in cfgdefault:
                if cfg not in ["debug","save user"]:
                    newconfig[cfg]=guiwscfg[cfg]
            if "buddykey" in guiwscfg:
                newconfig["buddykey"] = guiwscfg["buddykey"]
            else:
                if opts.debug:
                    guiwslog.debug("Generating random key")
                newconfig["buddykey"] = bl.keygen()

            with open(opts.configonly,"w") as cfile:
                json.dump(newconfig,cfile)
            os.chmod(opts.configonly,384) # 0600
            print ("Config was saved")
            sys.exit(1)

        if opts.user:
            from getpass import getpass
            nbtry=3
            done=False
            while nbtry:
                nbtry-=1
                password = getpass("Enter password for %s "%opts.user)
                verify = getpass("Verify password ")
                if password == verify :
                    done = True
                    guiwscfg["save user"]={opts.user:[password,"admin"]}
                    break
                else:
                    guiwslog.critical( "Passwords do not match.")
                    sys.exit(-2)
        guiwscfg["debug"]=opts.debug
        return guiwslog,guiwscfg
    except Exception as e:
        guiwslog.critical("{}".format(e))
        sys.exit(-2)

def serve_files(request):
    fname=request.match_info['fname']
    try:
        #if True:
        if fname == "favicon.ico":
            filedata = None
            with open(sysctl.config["application"], 'rb') as file :
                filedata = file.read()
            return web.Response(body=filedata,content_type="image/x-icon")
        else:
            #if fname == os.path.basename(sysctl.config["application"]):
            filedata = None
            with open(sysctl.config["application"], 'r') as file :
                filedata = file.read()
            # Replace the target string
            dodebug = sysctl.config["debug"] and "true" or "false"
            for val,newval in [("<BUDDYWSPROTOCOL/>",sockprot),
                            ("<BUDDYWSHOST/>",sysctl.config["host"]),
                            ("<BUDDYWSPORT/>","%d"%sysctl.config["port"])]:
                filedata = filedata.replace(val, newval)
            return web.Response(text=filedata,content_type="text/html")

    except:
        return web.HTTPInternalServerError("Ooops! Something's really wrong.")

async def on_shutdown(app):
    for ws in sysctl.devices:
        await ws.close(code=WSCloseCode.GOING_AWAY,
                       message='Server shutdown')

if __name__ == '__main__':

    mypath=os.path.dirname(os.path.abspath(__file__))+"/"
    guiwslog, guiwscfg = configure()

    if "tls" in guiwscfg and guiwscfg["tls"]:
        #ssl_context = ssl.create_default_context(capath=guiwscfg["tls"])
        ssl_context=ssl.SSLContext(protocol=ssl.PROTOCOL_TLS)
        ssl_context.load_cert_chain(guiwscfg["tls"]+"/"+WCERTFILE, guiwscfg["tls"]+'/'+WKEYFILE)
        sockprot="wss"
    else:
        ssl_contextFactory = None
        sockprot="ws"

    if  guiwscfg["ssl"]:
        b_ssl_context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,
            cafile=guiwscfg["ssl"]+'/'+CERTFILE)
        b_ssl_context.check_hostname = False
    else:
        b_ssl_context=None

    loop = aio.get_event_loop()
    if guiwscfg["debug"]:
        loop.set_debug(True)

    connFuture=aio.Future()
    fac=loop.create_connection(functools.partial(GuiWSBridge,loop,connFuture,guiwscfg,guiwslog),guiwscfg["broker"], guiwscfg["brokerport"],ssl=b_ssl_context)
    #Creating an app
    buddyapp=web.Application()
    buddyapp.router.add_static('/js', os.path.dirname(guiwscfg["application"])+"/js")
    buddyapp.router.add_static('/css', os.path.dirname(guiwscfg["application"])+"/css")
    buddyapp.router.add_static('/images', os.path.dirname(guiwscfg["application"])+"/images")
    buddyapp.router.add_static('/fonts', os.path.dirname(guiwscfg["application"])+"/fonts")
    buddyapp.router.add_get('/ws', websocket_handler)
    buddyapp.router.add_get('/{fname:.*}', serve_files)
    buddyapp.on_shutdown.append(on_shutdown)

    conn,sysctl = loop.run_until_complete(fac)
    whandler = buddyapp.make_handler(logger=guiwslog)
    wapp=loop.create_server(whandler,host=guiwscfg["host"],port=guiwscfg["port"],ssl=ssl_context)
    wserv = loop.run_until_complete(wapp)
    #web.run_app(buddyapp,host=guiwscfg["host"],port=guiwscfg["port"],ssl_context=ssl_context)

    try:
        loop.run_until_complete(connFuture)
    except  KeyboardInterrupt:
        print("\n","Exiting at user's request")
    finally:
        wserv.close()
        conn.close()
        loop.run_until_complete(wserv.wait_closed())
        loop.run_until_complete(buddyapp.shutdown())
        loop.run_until_complete(whandler.finish_connections(60.0))
        loop.run_until_complete(buddyapp.cleanup())
        loop.close()
