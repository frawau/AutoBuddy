#!/usr/bin/env python3
# -*- coding:utf-8 -*-
#
# This application listen for events and process them according
# to a set of rules. Commands and/or state changes may ensue.
#
# Copyright (c) 2017 Fran√ßois Wautier
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
# of the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies
# or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
# IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE

import argparse
import sys
import traceback
import json
import os
import ssl
import logging
import aiocoap
import datetime as dt
import asyncio as aio
import buddylib as bl
from functools import partial

SUBTYPE = "thingsboard"  
__version__ = "0.10"
CERTFILE = "autobuddy.crt"
MAXREQUEST = 1000
ERRORDELTA = 200
logger_function = """
"""

# Define for each value of the time scale what to reset and how. For example, for "hour" the timestamp will
# have "microsecond, second and, minute reset to 0
timelogdef = [("sec","microsecond",0),("min","second",0),("hour","minute",0),("day","hour",0),("month","day",1)]

logger_config = """
<buddyui version="0.1">
    <configuration  name="logger">
        <controlgroup type="listmaker" name="eventlog" label="Log Definition">
            <control name="label" label="Label" type="text" length="16" />
            <control name="entity" expand="device"  exopt="any withtype" label="Device" type="text" length="32" />
            <control name="event" label="Event" type="text" length="32" />
            <control name="evalue" label="Value" type="text" length="256" >
                <default>value</default>
            </control>
            <control name="token" label="Access Token" type="text" length="256" />
            <controlgroup name="type" label="Type" type="choice">
                <item value="telemetry" label="Telemetry" />
                <item value="attributes" label="Attribute" />
            </controlgroup>
        </controlgroup>
    </configuration>
</buddyui>
"""

logger_config_default = {"eventlog":{} }

class LoggerBridge(bl.BuddyBridge):

    """
    This is the bridge application. It will check for the current list  of sensor .
    It will report any new sensor
    """

    def __init__(self, loop, future, config, log):
        super(LoggerBridge, self).__init__(loop, future, config, log)
        self.logger_config = logger_config_default
        self.coap = None
        self.last_call=None
        self.request_count=0
        self.skipit=False
        

    def process_command(self, msg):
        if msg["content"]["command"] == "update config":
            if msg["content"]["target"] == self.target:
                for k, v in msg["content"]["value"].items():
                    logger_config_default[k] = v
                self.sending({"subject": "control" + "." + self.subtype,
                              "content_type": "request",
                              "content": {"request": "save configuration",
                                          "target": self.type,
                                          "value": bl.encrypt(logger_config_default, self.config["buddykey"])}})
                              

    def process_response(self, msg):
        
        if self.state == "init" and msg["content"]["response"] == "configuration" and msg["subject"] == self.target:
            # Getting the config
            newconfig = {}
            fromconfig = []
            if msg["content"]["configuration"]:
                try:
                    storedconfig = bl.decrypt(
                        msg["content"]["configuration"],
                        self.config["buddykey"])
                    if self.config["debug"]:
                        self.log.debug(
                            "The config stored is {}".format(storedconfig))
                except:
                    storedconfig = {}
                    savenew = True
                    # log
                    if self.log:
                        self.log.warning("Config is mangled")
                    else:
                        print("Config is mangled")

                for x in storedconfig:
                    self.logger_config[x] = storedconfig[x]
                # Now let's update the plugins
                self.current_logger={}

            self.config["database"] = msg["content"]["database"]
            if "configonly" in self.config and self.config["configonly"]:
                self.state = "wait config save"
            else:
                self.state = "active"
                self.build()
                self.sending({"subject": "control" + "." + self.target,
                              "content_type": "request",
                              "content": {"request": "functions",
                                          "target": self.type,
                                          "subtype": self.subtype,
                                          "value": {"configs": [logger_config, self.logger_config]}}})
                self.sending({"subject": self.config["restricted"],
                              "content_type": "restricted event",
                              "content": {"event": "config updated",
                                          "target": self.target,
                                          "value": self.logger_config}})

        elif msg["content"]["response"] == "save configuration" and msg["subject"] == self.target:
            if self.state == "active" and msg["content"]["status"] != "done":
                # log
                if self.log:
                    self.log.warning("Warning: Configuration was not saved.")
                else:
                    print("Warning: Configuration was not saved.")
            elif self.state == "wait config save":
                if msg["content"]["status"] == "done":
                    raise bl.Exit(0, "Configuration was saved")
                else:
                    raise bl.Exit(2, "Error: Configuration was not saved")
            else:
                self.sending({"subject": "control" + "." + self.target,
                              "content_type": "request",
                              "content": {"request": "functions",
                                          "target": self.type,
                                          "subtype": self.subtype,
                                          "value": {"configs": [logger_config, self.logger_config]}}})
                self.sending({"subject": self.config["restricted"],
                              "content_type": "restricted event",
                              "content": {"event": "config updated",
                                          "target": self.target,
                                          "value": self.logger_config}})
    
        else:
            if self.log:
                self.log.warning(
                    "Unknown response {} {} {}".format(msg["subject"],
                                                       msg["content_type"],
                                                       msg["content"]))
            else:
                print (
                    "Unknown response {} {} {}".format(msg["subject"],
                                                       msg["content_type"],
                                                       msg["content"]))


    def process_event(self, msg):
        
        if "target" not in msg["content"]:
            return
        msgentity = msg["content"]["target"].split(".")[-1]
        ts = round(dt.datetime.now().timestamp()*1000)
        for logdef in self.logger_config["eventlog"]:
            if msg["content"]["event"] == logdef["event"]:
                if logdef["entity"]["bu-cvalue"] != "" and not msgentity == logdef["entity"]["bu-cvalue"] and not msg["content"]["target"].startswith(logdef["entity"]["bu-cvalue"]):
                    continue
                #We got a live one
                lov=logdef["evalue"].split("|")[0].split("::")
                thevalue=msg["content"]
                wasset = True
                for x in lov:
                    try:
                        thevalue=thevalue[x]
                    except:
                        wasset =False
                        break
                if not wasset:
                    continue
                lov=logdef["evalue"].split("|")[1:]
                logval={}
                if lov:
                    wasset = False
                    realvalue={}
                    for x in lov:
                        if x in thevalue:
                            realvalue[x] = thevalue[x]
                            wasset = True
                    if not wasset:
                        continue #nothing to log
                else:
                    thekey=logdef["evalue"].split("|")[0].split("::")[-1]
                    realvalue={thekey:thevalue}
                if logdef["type"]["bu-cvalue"]=="telemetry":
                    logval["values"] = realvalue
                        
                    if "timestamp" in msg["content"]:
                        logval["ts"] = round(dt.datetime.strptime(msg["content"]["timestamp"],"%Y-%m-%d %H:%M:%S").timestamp()*1000)

                    else:
                        logval["ts"] = ts
                else:
                    logval=realvalue
                self.last_call = aio.ensure_future(self.submit_data(logdef["token"],logval,logdef["type"]["bu-cvalue"]))
                self.log.debug(
                    "Logged {} {}".format(msgentity,logval))
                
        
    def build(self):
        self.sending({"subject": "control" + "." + self.target,
                      "content_type": "request",
                      "content": {"request": "functions",
                                  "target": self.type,
                                  "subtype": self.subtype,
                                  #"token": self.target,
                                  "value": {"functions":logger_function, "configs": [logger_config, self.logger_config]}}})
        


    async def submit_data(self,token,data,dtype):
        if self.skipit:
            self.log.debug("Skipping {}".format(data)) #TODEL
            return
        if self.coap is None:
            self.log.debug("Starting {}".format(data)) #TODEL
            self.skipit = True
            self.coap = await aiocoap.Context.create_client_context()
            await aio.sleep(2)
            self.skipit = False
            self.request_count = 0
        self.request_count += 1
        request = aiocoap.Message(code=aiocoap.POST, payload=json.dumps(data).encode())
        request.opt.uri_host = self.config["url"]
        request.opt.uri_path = ("api","v1",token, dtype)
        response = await self.coap.request(request).response
        if not response.code.is_successful():
            self.log.debug("Error {} {} {}".format(response.code,response.payload,data)) #TODEL
            self.request_count += ERRORDELTA
        self.log.debug("Reponse for {} {} is: {} {}".format(dtype, data, response.code, response.payload))
        if self.request_count> MAXREQUEST:
            try:
                self.coap.shutdown()
            except:
                pass
            self.coap = None
                    

aboutstr = """<p>ThingsBoardBuddy is an application logging values associated with arbitrary event. It uses <a href"https://thingsboard.io/">ThingsBoard</a> as backend. Values to log need a token and
can be defined by separating the keys with "::", for multiple subvalues use "|". For instance, to log the "vector" value of an accelerometer, you could use "value::accelerometer::vector", to log the "vector" and "z" values, use "value::accelerometer|z|vector". Values can be log as either "attributes" or "telemetry" values. 
</p>
<p>ThingsBoardBuddy uses the <a href="https://thingsboard.io/docs/reference/coap-api/">CoAP API</a></p>
<p class=\"bu-copyright\">&copy; 2017 Fran&ccedil;ois Wautier</p>
"""


cfgdefault = {
    "type": "logger",
     "subtype": "thingsboard",
     "host": "localhost",
     "port": 8745,
     "credential": "",
     "ssl": "",
     "url":"demo.thingsboard.io",
     "restricted":"guibridge"}


def configure():
    parser = argparse.ArgumentParser(
        description="Log arbitrary data.")
    # version="%prog " + __version__ + "/" + bl.__version__)
    parser.add_argument("-t", "--type", default=cfgdefault["type"],
                        help="The type of devices we handle. (default \"%s\")." % cfgdefault["type"])
    parser.add_argument("-s", "--subtype", default=cfgdefault["subtype"],
                        help="The specific subtype we manage. (default \"%s\")." % cfgdefault["subtype"])

    parser.add_argument("-a", "--host", default=cfgdefault["host"],
                        help="The host address of the server (default \"%s\")." % cfgdefault["host"])
    parser.add_argument("-p", "--port", type=int, default=cfgdefault["port"],
                        help="The port used by the server (default \"%s\")." % cfgdefault["port"])

    parser.add_argument("-c", "--config", default="/etc/autobuddy/logger.cfg", type=argparse.FileType('r'),
                        help="Config file to use (default \"/etc/autobuddy/logger.cfg\")")

    parser.add_argument("-V", "--credential", default=cfgdefault['credential'],
                        help="The credential used to verify authorization (default \"%s\")." % cfgdefault["credential"])
    parser.add_argument("-S", "--ssl", default="",
                        help="The directory where the file %s can be found." % (CERTFILE))
    parser.add_argument("-v", "--verbose", action="store_true", default=False,
                        help="Log warning messages")

    parser.add_argument("-C", "--configonly", default="",
                        help="Exit after the the configuration has been saved")
    parser.add_argument("-d", "--debug", action="count", default=0,
                        help="Log debug information (default False)")
    parser.add_argument("-u", "--url", default=cfgdefault["url"],
                        help="The host address of the ThingsBoardserver (default \"%s\")." % cfgdefault["url"])
    parser.add_argument("-r", "--restricted", default=cfgdefault["restricted"],
                        help="Where to send \"restricted events\" (default \"%s\")." % cfgdefault["restricted"])

    try:
        opts = parser.parse_args()
    except Exception as e:
        parser.error("Error: " + str(e))

    if opts.debug:
        logging.basicConfig(
            level=logging.DEBUG,
            format='%(levelname)7s: %(message)s',
            stream=sys.stderr,
        )
    elif opts.verbose:
        logging.basicConfig(
            level=logging.WARNING,
            format='%(levelname)7s: %(message)s',
            stream=sys.stderr,
        )
    else:
        logging.basicConfig(
            level=logging.CRITICAL,
            format='%(levelname)7s: %(message)s',
            stream=sys.stderr,
        )
    loggerlog = logging.getLogger('')
    loggercfg = {"debug": opts.debug}
    try:
    # if True:
        if opts.configonly:
            try:
                cfgdata = json.load(opts.config)
                opts.config.close()
            except:
                cfgdata = {}
        else:
            cfgdata = json.load(opts.config)
            opts.config.close()

        for attr in cfgdefault:
            if opts.__getattribute__(attr) != cfgdefault[attr]:
                loggercfg[attr] = opts.__getattribute__(attr)
            elif attr in cfgdata:
                loggercfg[attr] = cfgdata[attr]
            else:
                loggercfg[attr] = opts.__getattribute__(attr)
            if opts.debug:
                loggerlog.debug("The %s is %s." % (attr,loggercfg[attr]))

            
        if loggercfg["ssl"] and not (os.path.isfile(loggercfg["ssl"] + "/" + CERTFILE)):
            loggerlog.critical("Encryption: Could not find {} .".format(
                loggercfg["ssl"] + "/" + CERTFILE))
            sys.exit()
            
        if opts.debug:
            if loggercfg["ssl"]:
                loggerlog.debug(
                    "The ssl certificates can be found in %s" %
                    loggercfg["ssl"])
            else:
                loggerlog.debug("The connection is not encrypted")
                
        
        if "buddykey" in cfgdata:
            loggercfg["buddykey"] = cfgdata["buddykey"]

        # Save hings
        if opts.configonly:

            if "buddykey" not in loggercfg:
                if opts.debug:
                    loggerlog.debug("Generating random key")
                loggercfg["buddykey"] = bl.keygen()
            try:
                del(loggercfg["debug"])
            except:
                pass
            with open(opts.configonly, "w") as cfile:
                json.dump(loggercfg, cfile)
            os.chmod(opts.configonly, 384)  # 0600
            sys.exit()

    except Exception as e:
        loggerlog.error("Error: %r" % e)
        sys.exit(-2)

    return (loggerlog, loggercfg)


if __name__ == "__main__":
    log, config = configure()
    log.info("Configured")
    loop = aio.get_event_loop()
    if config["debug"]:
        loop.set_debug(True)

    if config["ssl"]:
        sslcontext = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,
                                                cafile=config["ssl"] + '/' + CERTFILE)

        sslcontext.check_hostname = False
    else:
        sslcontext = None
    connFuture = aio.Future()
    fac = loop.create_connection(
            partial(LoggerBridge,
                    loop,
                    connFuture,
                    config,
                    log),
            config["host"],
            config["port"],
            ssl=sslcontext)
    conn, bridgectl = loop.run_until_complete(fac)

    loop.call_soon(
        bridgectl.configrequest,
        {"about": {"ThingsBoardBuddy": aboutstr}})
    
    try:
        loop.run_until_complete(connFuture)
    except KeyboardInterrupt:
        print("\n", "Exiting at user's request")
    finally:
        conn.close()
        loop.close()
