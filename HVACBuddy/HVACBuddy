#!/usr/bin/env python3
# -*- coding:utf-8 -*-
#
# This application is proxy to control HVAC system bia remote controls
#
# Copyright (c) 2018 Fran√ßois Wautier
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
# of the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies
# or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
# IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE

import argparse
import sys
import traceback
import importlib
import json
import logging
import os
import random
import ssl
import string
import buddylib as bl
import asyncio as aio
from uuid import uuid4
from functools import partial

SUBTYPE = "proxy"
CERTFILE = "autobuddy.crt"
__version__ = "0.10"


def intround(x):
    return int(round(x))


# Used to have different animation names
def animname():
    res = ""
    for x in range(4):
        res += random.choice(string.ascii_letters)
    return res


# <controlgroup modal="1" name="colour" label="Colour" widget="colourpicker">

proxy_commands = """
<buddyui version="0.1">
    <command name="proxy">
        <controlgroup  type="grouplist" name="action" label="Set" rteffect="1">
        <controlgroup type="choice" name="selectmodel" label="Select Model" onlyif="model::notset">
"""
proxy_command_end = """
        </controlgroup>
    </command>
</buddyui>
"""

proxy_config = ""
proxy_config_default = {"gateway": {}, "capabilities": {}, "model": {}, "status": {}}
proxy_module_commands = {}


def cssColour(self):
    return "#ffffff"


def proxy_process(self, msg, type="autobuddy"):
    bridgectl = self.controller
    # bridgectl.log.debug("\n\n\n --- {} processing for {} {}: {}".format(type,self.name,self.present,msg))
    if type == "autobuddy":
        if msg["content"]["command"] == "nickname":
            # print msg
            self.nickname = msg["content"]["value"]
            bridgectl.sending(
                {
                    "subject": "control" + "." + bridgectl.type,
                    "content_type": "request",
                    "content": {
                        "request": "nickname",
                        "target": bridgectl.type + "." + self.name,
                        # "token": bridgectl.target,
                        "value": {
                            "name": self.name,
                            "nickname": msg["content"]["value"],
                        },
                    },
                }
            )
        elif msg["content"]["command"] == "status":
            # Not gone the way of the dodo
            # try:
            self.sendStatus()
            # except: #Most probably is known but we lost pairing
            # pass
        elif msg["content"]["command"] == "deletion":
            bridgectl.sending(
                {
                    "subject": "control" + "." + bridgectl.type,
                    "content_type": "request",
                    "content": {
                        "request": "deletion",
                        "target": bridgectl.type,
                        "value": self.name,
                    },
                }
            )

        elif msg["content"]["command"] == "action":
            if "value" in msg["content"]:
                mvalue = msg["content"]["value"]
                # print("\n\n\nSetting things as {} fpr {}\n\n\n".format(mvalue,self.name))
                if "selectmodel" in mvalue:
                    hdef = mvalue["selectmodel"]["bu-cvalue"]
                    self.hvac = bridgectl.get_hvac(hdef)
                    bridgectl.match_model(self.name, hdef)
                else:
                    lokv = [(k, v) for k, v in mvalue.items()]
                    lokv.sort(
                        key=lambda x: (x[0] == "mode" and "zzzzzz" or x[0])
                    )  # Make sure mode is done last
                    for k, v in lokv:
                        if (
                            k in self.hvac.capabilities
                            or k in self.hvac.xtra_capabilities
                        ):
                            if isinstance(v, dict) and "bu-cvalue" in v:
                                val = v["bu-cvalue"]
                            else:
                                val = v
                            try:
                                if isinstance(val, str) and val.lower() in [
                                    "true",
                                    "false",
                                ]:
                                    val = val.lower() == "true"
                                self.hvac.set_value(k, val)
                            except:
                                bridgectl.log.debug(
                                    "Error: Should not happen, trying to set {} with {} for {}".format(
                                        k, val, self.name
                                    )
                                )

                    frames = self.hvac.build_ircode()
                    val = []
                    for f in frames:
                        val.append("".join(["%02x" % x for x in f]))

                    bridgectl.sending(
                        {
                            "subject": self.gateway,
                            "content_type": "command",
                            "content": {
                                "command": "send",
                                "target": "remotec",
                                "value": {
                                    "ctype": "ir",
                                    "code": val,
                                    "timing": self.hvac.get_timing(),
                                    "sender": bridgectl.type + "." + self.name,
                                    "command": "set",
                                },
                            },
                        }
                    )
        return None
    else:
        try:
            if (
                msg["content_type"] == "event"
                and msg["content"]["event"] == "code sent"
            ):
                value = msg["content"]["value"]
                if (
                    value["sender"] == bridgectl.type + "." + self.name
                    and value["sent"]
                ):
                    bridgectl.sending(
                        {
                            "subject": msg["subject"],
                            "content_type": "event",
                            "content": {
                                "event": "action",
                                "target": msg["subject"],
                                "value": value["command"],
                            },
                        }
                    )
                    self.hvac.update_status()
                    self.sendStatus()
                return True

            if not self.present:
                self.present = True
                bridgectl.sending(
                    {
                        "subject": bridgectl.type,
                        "content_type": "event",
                        "content": {
                            "event": "presence",
                            "target": bridgectl.type + "." + self.name,
                            "value": "online",
                            "icon status": {"bu-not-present": {"opacity": "0"}},
                        },
                    }
                )

                self.initialized = True
            self.sendInfo()
        except Exception as e:
            try:
                bridgectl.log.warning(
                    "Bloody process problem", exc_info=(type(e), e, e.__traceback__)
                )
            except:
                print("Oops {}".format(e))

        return True


def sendInfo(self):
    # Can be used in callback
    try:
        msg = ""
        prefix = '<div><dl class="dl-horizontal">'
        for x, lbl in [("model", "Model")]:
            if getattr(self, x) is not None:
                msg += (
                    prefix
                    + "<dt>"
                    + lbl.replace("_", " ").title()
                    + ":</dt><dd>"
                    + str(getattr(self, x))
                    + "</dd>"
                )
                prefix = ""
        if self.hvac:
            for x, v in [self.hvac.status.items()]:
                msg += (
                    prefix
                    + "<dt>"
                    + x.replace("_", " ").title()
                    + ":</dt><dd>"
                    + str(v)
                    + "</dd>"
                )
                prefix = ""
        devid = self.name
        if msg:
            msg += "</dl></div>"
            self.controller.sending(
                {
                    "subject": self.controller.type,
                    "content_type": "event",
                    "content": {
                        "event": "info",
                        "target": self.controller.type + "." + self.name,
                        "value": msg,
                    },
                }
            )
    except Exception as e:
        self.controller.log.debug(
            "Ooops could not send info", exc_info=(type(e), e, e.__traceback__)
        )


def sendStatus(self):
    status = {}

    if getattr(self, "hvac", None) is None:
        status["model"] = "notset"
        status["temperature"] = 0
        iconsts = {
            "bu-fill": {"fill": self.cssColour()},
            "bu-tens-0": {"opacity": "0"},
            "bu-tens-not-0": {"opacity": "1", "fill": self.cssColour()},
            "bu-naught-0": {"opacity": "0"},
            "bu-naught-not-0": {"opacity": "1", "fill": self.cssColour()},
            "bu-deci-0": {"opacity": "0"},
            "bu-deci-not-0": {"opacity": "1", "fill": self.cssColour()},
            "bu-auto": {"opacity": "0.5"},
            "bu-not-auto": {"opacity": "0"},
            "bu-fan-highest": {"opacity": "0.5"},
            "bu-fan-not-highest": {"opacity": "0"},
            "bu-swing-auto": {"opacity": "0.5"},
            "bu-swing-not-auto": {"opacity": "0"},
            "bu-power": {"opacity": "1", "fill": "black"},
        }
    else:
        status["model"] = self.hvac.model
        iconsts = {"bu-fill": {"fill": self.cssColour()}}
        skipit = self.hvac.status["mode"] == "off"
        for f, v in self.hvac.status.items():
            status[f] = v
            if f == "mode":
                if v not in ["auto", "feel", "cool", "dry", "heat", "fan", "off"]:
                    v = "auto"
                if v == "off":
                    iconsts["bu-power"] = {"fill": "black"}
                    iconsts["bu-not-auto"] = {"opacity": "0"}
                    iconsts["bu-auto"] = {"opacity": "0.3"}
                    iconsts["bu-fan-highest"] = {"opacity": "0.3"}
                    iconsts["bu-fan-not-highest"] = {"opacity": "0"}
                    iconsts["bu-swing-auto"] = {"opacity": "0.3"}
                    iconsts["bu-swing-not-auto"] = {"opacity": "0"}
                    for s in ["bu-tens-", "bu-naught-", "bu-deci-"]:
                        iconsts[s + "0"] = {"opacity": "0"}
                        iconsts[s + "not-0"] = {"opacity": "1"}
                else:
                    iconsts["bu-" + v] = {"opacity": "1"}
                    iconsts["bu-not-" + v] = {"opacity": "0"}
                    iconsts["bu-power"] = {"fill": "blue"}
            elif f == "fan":
                if not skipit:
                    if v not in ["highest", "high", "medium", "low", "lowest"]:
                        iconsts["bu-fan-highest"] = {"opacity": "0.5"}
                        iconsts["bu-fan-not-highest"] = {"opacity": "0"}
                    else:
                        iconsts["bu-fan-" + v] = {"opacity": "1"}
                        iconsts["bu-fan-not-" + v] = {"opacity": "0"}
            elif f == "swing":
                if not skipit:
                    if v not in [
                        "auto",
                        "auto high",
                        "auto low",
                        "90",
                        "60",
                        "45",
                        "30",
                        "15",
                    ]:
                        v = "auto"
                    iconsts["bu-swing-" + v] = {"opacity": "1"}
                    iconsts["bu-swing-not-" + v] = {"opacity": "0"}
            elif f == "temperature":
                if not skipit:
                    if float(v) >= 100:
                        v = float(v) / 10

                    v = str(int(float(v) * 10 + 0.5))
                    for d, s in zip(v, ["bu-tens-", "bu-naught-", "bu-deci-"]):
                        iconsts[s + d] = {"opacity": "1"}
                        iconsts[s + "not-" + d] = {"opacity": "0"}
        if self.hvac.functions == []:
            xx = self.hvac.available_functions()
        for x in self.hvac.functions:
            status[x] = "yes"

    self.controller.sending(
        {
            "subject": self.controller.type,
            "content_type": "event",
            "content": {
                "event": "status",
                "target": self.controller.type + "." + self.name,
                "icon status": iconsts,
                "value": status,
            },
        }
    )


# Hop we go....
bl.hvac._process = proxy_process
bl.hvac.cssColour = cssColour
bl.hvac.sendInfo = sendInfo
bl.hvac.sendStatus = sendStatus


class HVACBridge(bl.BuddyBridge):

    """
    This is the bridge application. It will check for the current list  of proxy
    It will report any new roller
    """

    def __init__(self, loop, future, config, log):
        super().__init__(loop, future, config, log)
        self.proxy_config = proxy_config_default
        self.shuttingdown = False
        self.infos = {}

    def match_model(self, dev, model):
        self.proxy_config["model"][dev] = model
        self.save_config()

    def save_config(self):
        self.sending(
            {
                "subject": "control" + "." + self.subtype,
                "content_type": "request",
                "content": {
                    "request": "save configuration",
                    "target": self.type,
                    "config name": config["subtype"] + "-hvac",
                    "value": bl.encrypt(self.proxy_config, self.config["buddykey"]),
                },
            }
        )

    def process_command(self, msg):
        if msg["content"]["command"] == "update config":
            if msg["content"]["target"] == self.target:
                for k, v in msg["content"]["value"].items():
                    self.proxy_config[k] = v
                self.save_config()

        elif msg["content"]["command"] == "new proxy device":
            ndev = msg["content"]["value"]
            ndev["nickname"] = ndev["name"]
            needname = True
            newname = ""
            while needname:
                newname = "hvac-p" + uuid4().hex[:9]
                needname = False
                for adev in self.devices:
                    if adev.name == newname:
                        needname = True
                        break
            ndev["name"] = newname
            self.pending.append(ndev)
            self.sending(
                {
                    "subject": "control" + "." + self.type,
                    "content_type": "request",
                    "content": {
                        "request": "creation",
                        "target": self.type,
                        # Here we need the type
                        # "token": self.target,
                        "value": {
                            "name": newname,
                            "nickname": ndev["nickname"],
                            "subtype": self.subtype,
                        },
                    },
                }
            )

        else:
            for aproxy in self.devices:
                aproxy.process(msg)

    def process_response(self, msg):
        # if msg["content"]["token"] != self.target:
        # if self.log:
        # self.log.warning("Token not matching {} vs {}".format(msg["content"]["token"],self.target))
        # else:
        # print ("Token not matching {} vs
        # {}".format(msg["content"]["token"],self.target))
        if (
            self.state == "init"
            and msg["content"]["response"] == "configuration"
            and msg["subject"] == self.target
        ):
            # Getting the config
            if msg["content"]["configuration"]:
                try:
                    storedconfig = bl.decrypt(
                        msg["content"]["configuration"], self.config["buddykey"]
                    )
                    if self.config["debug"]:
                        self.log.debug("The config stored is {}".format(storedconfig))
                except:
                    storedconfig = {}
                    savenew = True
                    # log
                    if self.log:
                        self.log.warning("Config is mangled")
                    else:
                        print("Config is mangled")

                for x in storedconfig:
                    self.proxy_config[x] = storedconfig[x]

            self.config["database"] = msg["content"]["database"]
            if "configonly" in self.config and self.config["configonly"]:
                self.state = "wait config save"
            else:
                self.state = "active"
                self.build()

        elif (
            msg["content"]["response"] == "save configuration"
            and msg["subject"] == self.target
        ):
            if self.state == "active" and msg["content"]["status"] != "done":
                # log
                if self.log:
                    self.log.warning("Warning: Configuration was not saved.")
                else:
                    print("Warning: Configuration was not saved.")
            else:
                self.sending(
                    {
                        "subject": "control" + "." + self.target,
                        "content_type": "request",
                        "content": {
                            "request": "functions",
                            "target": self.type,
                            "subtype": self.subtype,
                            # "token": self.target,
                            "value": {"configs": [proxy_config, {}]},
                        },
                    }
                )

                # Now update all the proxied present
                for dev in self.devices:
                    self.sending(
                        {
                            "subject": self.type,
                            "content_type": "event",
                            "content": {
                                "event": "presence",
                                "target": self.type + "." + dev.name,
                                "value": "online",
                                "icon status": {
                                    "bu-fill": {"fill": dev.cssColour()},
                                    "bu-not-present": {"opacity": "0"},
                                },
                            },
                        }
                    )

        elif (
            msg["content"]["response"] == "configuration"
            and msg["subject"] == self.target
        ):
            if msg["content"]["configuration"]:
                try:
                    storedprop = bl.decrypt(
                        msg["content"]["configuration"], self.config["buddykey"]
                    )
                    if self.config["debug"]:
                        self.log.debug("The property stored is {}".format(storedprop))
                except:
                    storedprop = {}
                    if self.config["debug"]:
                        self.log.debug("The property stored cannot be decrypted.")
                for k, v in storedprop.items():
                    self.proxy_config[k] = v

            if not (msg["content"]["configuration"] and storedprop):
                # First time around... was never saved that property.. let's do
                # it
                self.sending(
                    {
                        "subject": "control" + "." + self.subtype,
                        "content_type": "request",
                        "content": {
                            "request": "save configuration",
                            "target": self.type,
                            "config name": config["subtype"] + "-hvac",
                            # "token": self.target,
                            "value": bl.encrypt(
                                self.proxy_config, self.config["buddykey"]
                            ),
                        },
                    }
                )
        elif self.state == "active":
            if (
                msg["content"]["response"] == "creation"
                and msg["content"]["status"] == "done"
            ):
                sess = bl.getSession(self.config["database"])
                hvac = (
                    sess.query(bl.hvac)
                    .filter_by(name=msg["subject"].split(".")[-1])
                    .one()
                )
                self.sending(
                    {
                        "subject": self.type,
                        "content_type": "event",
                        "content": {
                            "event": "new device",
                            "target": self.type + "." + hvac.name,
                            "value": {
                                "type": self.type,
                                "subtype": self.subtype,
                                "name": hvac.name,
                                "nickname": hvac.nickname,
                            },
                        },
                    }
                )
                notseen = True
                for b in [x for x in self.pending]:
                    if b["name"] == hvac.name:
                        hvac.present = True
                        hvac.controller = self
                        hvac.gateway = b["gateway"]
                        hvac.info = {}
                        hvac.hvac = None
                        hvac.learnir = ("learn_ir" in b["commands"] and "yes") or "no"
                        hvac.learnrf = ("learn_rf" in b["commands"] and "yes") or "no"
                        self.proxy_config["gateway"][hvac.name] = b["gateway"]
                        self.devices.append(hvac)
                        self.pending.remove(b)
                        self.sending(
                            {
                                "subject": self.type,
                                "content_type": "event",
                                "content": {
                                    "event": "presence",
                                    "target": self.type + "." + hvac.name,
                                    "value": "online",
                                    "icon status": {
                                        "bu-fill": {"fill": hvac.cssColour()},
                                        "bu-not-present": {"opacity": "0"},
                                    },
                                },
                            }
                        )
                        self.sending(
                            {
                                "subject": "control" + "." + self.subtype,
                                "content_type": "request",
                                "content": {
                                    "request": "save configuration",
                                    "target": self.type,
                                    "config name": self.config["subtype"] + "-hvac",
                                    # "token": self.target,
                                    "value": bl.encrypt(
                                        self.proxy_config, self.config["buddykey"]
                                    ),
                                },
                            }
                        )
                        notseen = False
                        break
                if notseen:
                    self.sending(
                        {
                            "subject": self.type,
                            "content_type": "event",
                            "content": {
                                "event": "presence",
                                "target": self.type + "." + hvac.name,
                                "value": "offline",
                                "icon status": {
                                    "bu-fill": {"fill": hvac.cssColour()},
                                    "bu-not-present": {"opacity": "1"},
                                },
                            },
                        }
                    )
                sess.close()
            elif msg["content"]["response"] == "nickname":
                if msg["content"]["status"] == "done":
                    if self.log:
                        self.log.debug(msg)
                    for hvac in self.devices:
                        if hvac.name == msg["subject"].split(".")[-1]:
                            hvac.nickname = msg["content"]["value"]
                            self.sending(
                                {
                                    "subject": self.type,
                                    "content_type": "event",
                                    "content": {
                                        "event": "nickname",
                                        "target": self.type + "." + hvac.name,
                                        "value": hvac.nickname,
                                    },
                                }
                            )
                            break

            elif msg["content"]["response"] == "deletion":
                if msg["content"]["status"] == "done":
                    if self.log:
                        self.log.debug(msg)
                    sidx = 0
                    doremove = False
                    for hvac in self.devices:
                        if hvac.name == msg["subject"].split(".")[-1]:
                            self.sending(
                                {
                                    "subject": self.type,
                                    "content_type": "event",
                                    "content": {
                                        "event": "deletion",
                                        "target": self.type + "." + hvac.name,
                                        "value": hvac.name,
                                    },
                                }
                            )
                            doremove = True
                            if hvac.name in self.proxy_config["gateway"]:
                                del self.proxy_config["gateway"][hvac.name]
                                del self.proxy_config["model"][hvac.name]
                            break

                        sidx += 1
                    if doremove:
                        del self.devices[sidx]
                        self.save_config()
        else:
            if self.log:
                self.log.warning(
                    "Unknown response {} {} {}".format(
                        msg["subject"], msg["content_type"], msg["content"]
                    )
                )
            else:
                print(
                    "Unknown response {} {} {}".format(
                        msg["subject"], msg["content_type"], msg["content"]
                    )
                )

    def process_event(self, msg):
        if msg["content"]["event"] == "code sent":
            for dev in self.devices:
                if dev.of_interest(msg["subject"]):
                    return dev._process(msg, "proxy")

    def build(self):
        self.sending(
            {
                "subject": "control" + "." + self.target,
                "content_type": "request",
                "content": {
                    "request": "functions",
                    "target": self.type,
                    "subtype": self.subtype,
                    # "token": self.target,
                    "value": {
                        "functions": proxy_commands,
                        "module commands": proxy_module_commands,
                        "configs": [proxy_config, {}],
                    },
                },
            }
        )

        sess = bl.getSession(self.config["database"])
        self.devices = sess.query(bl.hvac).filter_by(subtype=self.subtype).all()
        for hvac in self.devices:
            hvac.present = False
            hvac.controller = self
            hvac.info = {}
            try:
                hvac.hvac = self.get_hvac(self.proxy_config["model"][hvac.name])
            except:
                hvac.hvac = None
            hvac.gateway = self.proxy_config["gateway"][hvac.name]
            try:
                hvac.learnir = (
                    "learn_ir" in self.proxy_config["capabilities"][hvac.gateway]
                    and "yes"
                ) or "no"
            except:
                hvac.learnir = "no"
            try:
                hvac.learnrf = (
                    "learn_rf" in self.proxy_config["capabilities"][hvac.gateway]
                    and "yes"
                ) or "no"
            except:
                hvac.learnrf = "no"

            self.sending(
                {
                    "subject": self.type,
                    "content_type": "event",
                    "content": {
                        "event": "presence",
                        "target": self.type + "." + hvac.name,
                        "value": "online",
                        "icon status": {},
                    },
                }
            )
            # hvac.sendStatus()

        sess.close()

    def register(self, loproxy):
        seen = False
        aproxy = loproxy[0]  # All the hvacs are created in tandem with the device

        for proxy in self.devices:
            if proxy.name == aproxy:
                seen = True
                break
        if seen:
            sname = aproxy
            for proxy in self.devices:
                if proxy.name.startswith(sname):
                    proxy.controller = self
                    if not proxy.present:
                        proxy.present = True
                        self.sending(
                            {
                                "subject": self.type,
                                "content_type": "event",
                                "content": {
                                    "event": "presence",
                                    "target": self.type + "." + proxy.name,
                                    "value": "online",
                                    "icon status": {"bu-not-present": {"opacity": "0"}},
                                },
                            }
                        )

        else:
            for aproxy in loproxy:
                if aproxy not in self.pending:
                    self.pending.append(aproxy)
                    self.sending(
                        {
                            "subject": "control" + "." + self.type,
                            "content_type": "request",
                            "content": {
                                "request": "creation",
                                "target": self.type,
                                # Here we need the type
                                # "token": self.target,
                                "value": {
                                    "name": aproxy,
                                    "nickname": aproxy,
                                    "subtype": self.subtype,
                                },
                            },
                        }
                    )

    def unregister(self, aproxy):
        if aproxy.name in [x["name"] for x in self.pending]:
            self.pending = [x for x in self.pending if x["name"] != aproxy.name]
        else:
            for hvac in self.devices:
                try:  # HAve to protect, in some rare cases, swirxg does not have a name attribute yet
                    if hvac.name == aproxy:
                        hvac.present = False
                        self.sending(
                            {
                                "subject": self.type,
                                "content_type": "event",
                                "content": {
                                    "event": "presence",
                                    "target": self.type + "." + hvac.name,
                                    "value": "offline",
                                    "icon status": {"bu-not-present": {"opacity": "1"}},
                                },
                            }
                        )
                except:
                    pass

    def add_rccommand(self, device, command, value):
        if not device in self.proxy_config["commands"]:
            self.proxy_config["commands"][device] = {command: value}
        else:
            self.proxy_config["commands"][device][command] = value
        self.sending(
            {
                "subject": "control" + "." + self.subtype,
                "content_type": "request",
                "content": {
                    "request": "save configuration",
                    "target": self.type,
                    "config name": config["subtype"] + "-hvac",
                    # "token": self.target,
                    "value": bl.encrypt(self.proxy_config, self.config["buddykey"]),
                },
            }
        )

    def get_hvac(self, name):
        global plugs

        brand, model = name.split("||")
        for x in plugs:
            if brand == x.brand:
                newhvac = x.factory(model)
                # TODO Add persisted information
                return newhvac
        return None


aboutstr = """<p>HVACBuddy is a proxy between AutoBuddy and hvac devices controlled by a IR/RF remote control.</p>
<p class=\"bu-copyright\">&copy; 2019 Fran&ccedil;ois Wautier</p>
"""
iconstr = """
<svg class="bu-device-icon" width="60" height="60" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
    <g  class="bu-temps" transform="scale(0.6 0.6) translate(0 30)" >
        <g transform="translate(-60 0)" >
            <path class="bu-fill bu-tens-0 bu-tens-not-1 bu-tens-2 bu-tens-3 bu-tens-not-4 bu-tens-5 bu-tens-6 bu-tens-7 bu-tens-8 bu-tens-9"
            d="M 190.79731,72.5 L 175.58534,88 L 116.58535,88 L 101.06756,72.5 L 116.58535,57 L 175.58534,57 L 190.79731,72.5 z" opacity="1"/>
            <path class="bu-fill bu-tens-not-0 bu-tens-not-1 bu-tens-2 bu-tens-3 bu-tens-4 bu-tens-5 bu-tens-6 bu-tens-not-7 bu-tens-8 bu-tens-not-9"
            d="M 190.79731,154 L 175.58534,169.5 L 116.58535,169.5 L 101.06756,154 L 116.58535,138.5 L 175.58534,138.5 L 190.79731,154 z" opacity="0"/>
            <path class="bu-fill bu-tens-0 bu-tens-not-1 bu-tens-not-2 bu-tens-not-3 bu-tens-4 bu-tens-5 bu-tens-6 bu-tens-not-7 bu-tens-8 bu-tens-9"
            d="M 98,75.38513 L 113.5,90.59709 L 113.5,135.59708 L 98,151.11487 L 82.5,135.59708 L 82.5,90.59709 L 98,75.38513 z" opacity="1" />
            <path class="bu-fill bu-tens-0 bu-tens-1 bu-tens-2 bu-tens-3 bu-tens-4 bu-tens-not-5 bu-tens-not-6 bu-tens-7 bu-tens-8 bu-tens-9"
            d="M 194,75.38513 L 209.5,90.59709 L 209.5,135.59708 L 194,151.11487 L 178.5,135.59708 L 178.5,90.59709 L 194,75.38513 z" opacity="1"/>
            <path class="bu-fill bu-tens-0 bu-tens-not-1 bu-tens-2 bu-tens-3 bu-tens-not-4 bu-tens-5 bu-tens-6 bu-tens-not-7 bu-tens-8 bu-tens-not-9"
                d="M 190.79731,236.05743 L 175.58534,251.55743 L 116.58535,251.55743 L 101.06756,236.05743 L 116.58535,220.55743 L 175.58534,220.55743 L 190.79731,236.05743 z" opacity="1"/>
            <path class="bu-fill bu-tens-0 bu-tens-not-1 bu-tens-2 bu-tens-not-3 bu-tens-not-4 bu-tens-not-5 bu-tens-6 bu-tens-not-7 bu-tens-8 bu-tens-not-9"
            d="M 98,157.44257 L 113.5,172.65453 L 113.5,217.65452 L 98,233.1723 L 82.5,217.65452 L 82.5,172.65453 L 98,157.44257 z" opacity="1" />
            <path class="bu-fill bu-tens-0 bu-tens-1 bu-tens-not-2 bu-tens-3 bu-tens-4 bu-tens-5 bu-tens-6 bu-tens-7 bu-tens-8 bu-tens-9"
            d="M 194,157.44257 L 209.5,172.65453 L 209.5,217.65452 L 194,233.1723 L 178.5,217.65452 L 178.5,172.65453 L 194,157.44257 z"  opacity="1" />
        </g>
        <g transform="translate(80 0)" >
            <path class="bu-fill bu-naught-0 bu-naught-not-1 bu-naught-2 bu-naught-3 bu-naught-not-4 bu-naught-5 bu-naught-6 bu-naught-7 bu-naught-8 bu-naught-9"
            d="M 190.79731,72.5 L 175.58534,88 L 116.58535,88 L 101.06756,72.5 L 116.58535,57 L 175.58534,57 L 190.79731,72.5 z" opacity="1" />
            <path class="bu-fill bu-naught-not-0 bu-naught-not-1 bu-naught-2 bu-naught-3 bu-naught-4 bu-naught-5 bu-naught-6 bu-naught-not-7 bu-naught-8 bu-naught-not-9"
            d="M 190.79731,154 L 175.58534,169.5 L 116.58535,169.5 L 101.06756,154 L 116.58535,138.5 L 175.58534,138.5 L 190.79731,154 z" opacity="0" />
            <path class="bu-fill bu-naught-0 bu-naught-not-1 bu-naught-not-2 bu-naught-not-3 bu-naught-4 bu-naught-5 bu-naught-6 bu-naught-not-7 bu-naught-8 bu-naught-9"
            d="M 98,75.38513 L 113.5,90.59709 L 113.5,135.59708 L 98,151.11487 L 82.5,135.59708 L 82.5,90.59709 L 98,75.38513 z" opacity="1"  />
            <path class="bu-fill bu-naught-0 bu-naught-1 bu-naught-2 bu-naught-3 bu-naught-4 bu-naught-not-5 bu-naught-not-6 bu-naught-7 bu-naught-8 bu-naught-9"
            d="M 194,75.38513 L 209.5,90.59709 L 209.5,135.59708 L 194,151.11487 L 178.5,135.59708 L 178.5,90.59709 L 194,75.38513 z" opacity="1"  />
            <path class="bu-fill bu-naught-0 bu-naught-not-1 bu-naught-2 bu-naught-3 bu-naught-not-4 bu-naught-5 bu-naught-6 bu-naught-not-7 bu-naught-8 bu-naught-not-9"
            d="M 190.79731,236.05743 L 175.58534,251.55743 L 116.58535,251.55743 L 101.06756,236.05743 L 116.58535,220.55743 L 175.58534,220.55743 L 190.79731,236.05743 z" opacity="1" />
            <path class="bu-fill bu-naught-0 bu-naught-not-1 bu-naught-2 bu-naught-not-3 bu-naught-not-4 bu-naught-not-5 bu-naught-6 bu-naught-not-7 bu-naught-8 bu-naught-not-9"
            d="M 98,157.44257 L 113.5,172.65453 L 113.5,217.65452 L 98,233.1723 L 82.5,217.65452 L 82.5,172.65453 L 98,157.44257 z" opacity="1" />
            <path class="bu-fill bu-naught-0 bu-naught-1 bu-naught-not-2 bu-naught-3 bu-naught-4 bu-naught-5 bu-naught-6 bu-naught-7 bu-naught-8 bu-naught-9"
            d="M 194,157.44257 L 209.5,172.65453 L 209.5,217.65452 L 194,233.1723 L 178.5,217.65452 L 178.5,172.65453 L 194,157.44257 z" opacity="1" />
            <path class="bu-fill"
            d="M 221.5 299.25 A 12.25 12.25 0 1 1  197,299.25 A 12.25 12.25 0 1 1  221.5 299.25 z"
            transform="matrix(1.474389,0,0,1.404061,-77.23529,-186.3204)" opacity="1" />
        </g>
        <g transform="translate(290 120) scale(0.5 0.5)" >
            <path class="bu-fill bu-deci-0 bu-deci-not-1 bu-deci-2 bu-deci-3 bu-deci-not-4 bu-deci-5 bu-deci-6 bu-deci-7 bu-deci-8 bu-deci-9"
            d="M 190.79731,72.5 L 175.58534,88 L 116.58535,88 L 101.06756,72.5 L 116.58535,57 L 175.58534,57 L 190.79731,72.5 z" opacity="1"/>
            <path class="bu-fill bu-deci-not-0 bu-deci-not-1 bu-deci-2 bu-deci-3 bu-deci-4 bu-deci-5 bu-deci-6 bu-deci-not-7 bu-deci-8 bu-deci-not-9"
            d="M 190.79731,154 L 175.58534,169.5 L 116.58535,169.5 L 101.06756,154 L 116.58535,138.5 L 175.58534,138.5 L 190.79731,154 z" opacity="0"/>
            <path class="bu-fill bu-deci-0 bu-deci-not-1 bu-deci-not-2 bu-deci-not-3 bu-deci-4 bu-deci-5 bu-deci-6 bu-deci-not-7 bu-deci-8 bu-deci-9"
            d="M 98,75.38513 L 113.5,90.59709 L 113.5,135.59708 L 98,151.11487 L 82.5,135.59708 L 82.5,90.59709 L 98,75.38513 z" opacity="1" />
            <path class="bu-fill bu-deci-0 bu-deci-1 bu-deci-2 bu-deci-3 bu-deci-4 bu-deci-not-5 bu-deci-not-6 bu-deci-7 bu-deci-8 bu-deci-9"
            d="M 194,75.38513 L 209.5,90.59709 L 209.5,135.59708 L 194,151.11487 L 178.5,135.59708 L 178.5,90.59709 L 194,75.38513 z" opacity="1" />
            <path class="bu-fill bu-deci-0 bu-deci-not-1 bu-deci-2 bu-deci-3 bu-deci-not-4 bu-deci-5 bu-deci-6 bu-deci-not-7 bu-deci-8 bu-deci-not-9"
            d="M 190.79731,236.05743 L 175.58534,251.55743 L 116.58535,251.55743 L 101.06756,236.05743 L 116.58535,220.55743 L 175.58534,220.55743 L 190.79731,236.05743 z" opacity="1" />
            <path class="bu-fill bu-deci-0 bu-deci-not-1 bu-deci-2 bu-deci-not-3 bu-deci-not-4 bu-deci-not-5 bu-deci-6 bu-deci-not-7 bu-deci-8 bu-deci-not-9"
            d="M 98,157.44257 L 113.5,172.65453 L 113.5,217.65452 L 98,233.1723 L 82.5,217.65452 L 82.5,172.65453 L 98,157.44257 z" opacity="1" />
            <path class="bu-fill bu-deci-0 bu-deci-1 bu-deci-not-2 bu-deci-3 bu-deci-4 bu-deci-5 bu-deci-6 bu-deci-7 bu-deci-8 bu-deci-9"
            d="M 194,157.44257 L 209.5,172.65453 L 209.5,217.65452 L 194,233.1723 L 178.5,217.65452 L 178.5,172.65453 L 194,157.44257 z" opacity="1" />
        </g>
    </g>
    <g  class="bu-mode" transform="scale(0.50 0.50) translate(500, 0)" >
        <g transform="translate(32 0)" >
            <path class="bu-cool bu-not-fan bu-not-heat bu-not-auto bu-not-feel bu-not-dry"
                  d="M440.3 345.2l-33.8-19.5 26-7c8.2-2.2 13.1-10.7
                  10.9-18.9l-4-14.9c-2.2-8.2-10.7-13.1-18.9-10.9l-70.8 19-63.9-37 63.8-36.9
                  70.8 19c8.2 2.2 16.7-2.7 18.9-10.9l4-14.9c2.2-8.2-2.7-16.7-10.9-18.9l-26-7
                  33.8-19.5c7.4-4.3 9.9-13.7 5.7-21.1L430.4 119c-4.3-7.4-13.7-9.9-21.1-5.7l-33.8
                  19.5 7-26c2.2-8.2-2.7-16.7-10.9-18.9l-14.9-4c-8.2-2.2-16.7 2.7-18.9 10.9l-19
                  70.8-62.8 36.2v-77.5l53.7-53.7c6.2-6.2 6.2-16.4 0-22.6l-11.3-11.3c-6.2-6.2-16.4-6.2-22.6
                  0L256 56.4V16c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v40.4l-19.7-19.7c-6.2-6.2-16.4-6.2-22.6
                  0L138.3 48c-6.3 6.2-6.3 16.4 0 22.6l53.7 53.7v77.5l-62.8-36.2-19-70.8c-2.2-8.2-10.7-13.1-18.9-10.9l-14.9
                  4c-8.2 2.2-13.1 10.7-10.9 18.9l7 26-33.8-19.5c-7.4-4.3-16.8-1.7-21.1 5.7L2.1 145.7c-4.3
                  7.4-1.7 16.8 5.7 21.1l33.8 19.5-26 7c-8.3 2.2-13.2 10.7-11 19l4 14.9c2.2 8.2 10.7 13.1
                  18.9 10.9l70.8-19 63.8 36.9-63.8 36.9-70.8-19c-8.2-2.2-16.7 2.7-18.9 10.9l-4 14.9c-2.2
                  8.2 2.7 16.7 10.9 18.9l26 7-33.8 19.6c-7.4 4.3-9.9 13.7-5.7 21.1l15.5 26.8c4.3 7.4
                  13.7 9.9 21.1 5.7l33.8-19.5-7 26c-2.2 8.2 2.7 16.7 10.9 18.9l14.9 4c8.2 2.2 16.7-2.7
                  18.9-10.9l19-70.8 62.8-36.2v77.5l-53.7 53.7c-6.3 6.2-6.3 16.4 0 22.6l11.3 11.3c6.2
                  6.2 16.4 6.2 22.6 0l19.7-19.7V496c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16v-40.4l19.7
                  19.7c6.2 6.2 16.4 6.2 22.6 0l11.3-11.3c6.2-6.2 6.2-16.4 0-22.6L256 387.7v-77.5l62.8
                  36.2 19 70.8c2.2 8.2 10.7 13.1 18.9 10.9l14.9-4c8.2-2.2 13.1-10.7 10.9-18.9l-7-26
                  33.8 19.5c7.4 4.3 16.8 1.7 21.1-5.7l15.5-26.8c4.3-7.3 1.8-16.8-5.6-21z" opacity="0"/>
        </g>
        <path class="bu-fan bu-not-cool bu-not-heat bu-not-auto bu-not-feel bu-not-dry"
                d="M352.57 128c-28.09 0-54.09 4.52-77.06 12.86l12.41-123.11C289 7.31 279.81-1.18
                269.33.13 189.63 10.13 128 77.64 128 159.43c0 28.09 4.52 54.09 12.86 77.06L17.75 224.08C7.31
                223-1.18 232.19.13 242.67c10 79.7 77.51 141.33 159.3 141.33 28.09 0 54.09-4.52 77.06-12.86l-12.41
                123.11c-1.05 10.43 8.11 18.93 18.59 17.62 79.7-10 141.33-77.51 141.33-159.3
                0-28.09-4.52-54.09-12.86-77.06l123.11 12.41c10.44 1.05 18.93-8.11
                17.62-18.59-10-79.7-77.51-141.33-159.3-141.33zM256 288a32 32 0 1 1 32-32 32 32 0 0 1-32 32z" opacity="0" />
        <path class="bu-heat bu-not-cool bu-not-fan bu-not-auto bu-not-feel bu-not-dry"
              d="M323.56 51.2c-20.8 19.3-39.58 39.59-56.22 59.97C240.08 73.62 206.28
              35.53 168 0 69.74 91.17 0 209.96 0 281.6 0 408.85 100.29 512 224 512s224-103.15
              224-230.4c0-53.27-51.98-163.14-124.44-230.4zm-19.47 340.65C282.43 407.01 255.72 416 226.86 416
              154.71 416 96 368.26 96 290.75c0-38.61 24.31-72.63 72.79-130.75 6.93 7.98 98.83 125.34
              98.83 125.34l58.63-66.88c4.14 6.85 7.91 13.55 11.27 19.97 27.35 52.19 15.81 118.97-33.43 153.42z" opacity="0" />
        <g transform="translate(80 0)" >
            <path class="bu-dry bu-not-cool bu-not-fan bu-not-heat bu-not-auto bu-not-feel" d="M205.22
            22.09c-7.94-28.78-49.44-30.12-58.44 0C100.01 179.85 0 222.72 0
                  333.91 0 432.35 78.72 512 176 512s176-79.65 176-178.09c0-111.75-99.79-153.34-146.78-311.82zM176
                  448c-61.75 0-112-50.25-112-112 0-8.84 7.16-16 16-16s16 7.16 16 16c0 44.11 35.89 80 80 80 8.84
                  0 16 7.16 16 16s-7.16 16-16 16z" opacity="0" />
        </g>
        <path class="bu-auto bu-feel bu-not-cool bu-not-heat bu-not-fan bu-not-dry" transform="scale(-1, 1) translate(-512, 0)"
              d="M184.561 261.903c3.232 13.997-12.123
              24.635-24.068 17.168l-40.736-25.455-50.867 81.402C55.606 356.273 70.96 384 96.012 384H148c6.627 0 12 5.373
              12 12v40c0 6.627-5.373 12-12 12H96.115c-75.334 0-121.302-83.048-81.408-146.88l50.822-81.388-40.725-25.448c-12.081-7.547-8.966-25.961
              4.879-29.158l110.237-25.45c8.611-1.988 17.201 3.381 19.189 11.99l25.452 110.237zm98.561-182.915l41.289
              66.076-40.74 25.457c-12.051 7.528-9 25.953 4.879 29.158l110.237 25.45c8.672 1.999 17.215-3.438 19.189-11.99l25.45-110.237c3.197-13.844-11.99-24.719-24.068-17.168l-40.687
              25.424-41.263-66.082c-37.521-60.033-125.209-60.171-162.816 0l-17.963 28.766c-3.51 5.62-1.8
              13.021 3.82 16.533l33.919 21.195c5.62 3.512 13.024 1.803 16.536-3.817l17.961-28.743c12.712-20.341
              41.973-19.676 54.257-.022zM497.288 301.12l-27.515-44.065c-3.511-5.623-10.916-7.334-16.538-3.821l-33.861
              21.159c-5.62 3.512-7.33 10.915-3.818 16.536l27.564 44.112c13.257 21.211-2.057 48.96-27.136 48.96H320V336.02c0-14.213-17.242-21.383-27.313-11.313l-80 79.981c-6.249 6.248-6.249 16.379 0 22.627l80
              79.989C302.689 517.308 320 510.3 320 495.989V448h95.88c75.274 0 121.335-82.997 81.408-146.88z" opacity="0" />
    </g>
    <g class="bu-fan">
        <polygon class="bu-fan-highest bu-fan-not-high bu-fan-not-middle bu-fan-not-low bu-fan-not-lowest" points="20,500 254,500 254,320" opacity="0.5" />
        <polygon class="bu-fan-not-highest bu-fan-high bu-fan-not-middle bu-fan-not-low bu-fan-not-lowest" points="20,500 215,500 215,350" opacity="0" />
        <polygon class="bu-fan-not-highest bu-fan-not-high bu-fan-middle bu-fan-not-low bu-fan-not-lowest" points="20,500 175,500 176,380" opacity="0" />
        <polygon class="bu-fan-not-highest bu-fan-not-high bu-fan-not-middle bu-fan-low bu-fan-not-lowest" points="20,500 137,500 137,410" opacity="0" />
        <polygon class="bu-fan-not-highest bu-fan-not-high bu-fan-not-middle bu-fan-not-low bu-fan-lowest" points="20,500 98,500 98,440" opacity="0" />
    </g>
    <g class="bu-swing" transform="translate(220, 256)" >
        <circle cx="246" cy="75" r="10" fill="black" />
        <rect class="bu-swing-90 bu-swing-auto bu-swing-autohigh bu-swing-not-autolow bu-swing-not-75 bu-swing-not-60 bu-swing-not-45 bu-swing-not-30 bu-swing-not-15 bu-swing-not-0" x="90" y="70" width="130" height="10" style="fill:black;" opacity="1" />
        <rect class="bu-swing-75 bu-swing-auto bu-swing-autohigh bu-swing-not-autolow bu-swing-not-90 bu-swing-not-45 bu-swing-not-30 bu-swing-not-15" x="90" y="70" width="130" height="10" style="fill:black;" transform="rotate(-15, 246 75)" opacity="1" />
        <rect class="bu-swing-60 bu-swing-auto bu-swing-autohigh bu-swing-autolow bu-swing-not-90 bu-swing-not-75 bu-swing-not-45 bu-swing-not-30 bu-swing-not-15 bu-swing-not-0" x="90" y="70" width="130" height="10" style="fill:black;" transform="rotate(-30, 246 75)" opacity="1" />
        <rect class="bu-swing-45 bu-swing-auto bu-swing-autohigh bu-swing-autolow bu-swing-not-90 bu-swing-not-75 bu-swing-not-60 bu-swing-not-30 bu-swing-not-15 bu-swing-not-0" x="90" y="70" width="130" height="10" style="fill:black;" transform="rotate(-45, 246 75)" opacity="1" />
        <rect class="bu-swing-30 bu-swing-auto bu-swing-autohigh bu-swing-autolow bu-swing-not-90 bu-swing-not-75 bu-swing-not-60 bu-swing-not-45 bu-swing-not-15 bu-swing-not-0" x="90" y="70" width="130" height="10" style="fill:black;" transform="rotate(-60, 246 75)" opacity="1" />
        <rect class="bu-swing-15 bu-swing-auto bu-swing-autohigh bu-swing-autolow bu-swing-not-90 bu-swing-not-75 bu-swing-not-60 bu-swing-not-45 bu-swing-not-30 bu-swing-not-0" x="90" y="70" width="130" height="10" style="fill:black;" transform="rotate(-75, 246 75)" opacity="1" />
        <rect class="bu-swing-0 bu-swing-auto bu-swing-autohigh bu-swing-autolow bu-swing-not-90 bu-swing-not-75 bu-swing-not-60 bu-swing-not-45 bu-swing-not-30 bu-swing-not-15" x="90" y="70" width="130" height="10" style="fill:black;" transform="rotate(-90, 246 75)" opacity="1" />
    </g>
    <g class="bu-onoff" transform="translate(50,220) scale(0.25 0.25)" >
        <path class="bu-power" d="M400 54.1c63 45 104 118.6 104 201.9 0 136.8-110.8 247.7-247.5 248C120 504.3 8.2 393 8 256.4 7.9 173.1 48.9 99.3 111.8 54.2c11.7-8.3 28-4.8 35 7.7L162.6 90c5.9 10.5 3.1 23.8-6.6 31-41.5 30.8-68 79.6-68 134.9-.1 92.3 74.5 168.1 168 168.1 91.6 0 168.6-74.2 168-169.1-.3-51.8-24.7-101.8-68.1-134-9.7-7.2-12.4-20.5-6.5-30.9l15.8-28.1c7-12.4 23.2-16.1 34.8-7.8zM296 264V24c0-13.3-10.7-24-24-24h-32c-13.3 0-24 10.7-24 24v240c0 13.3 10.7 24 24 24h32c13.3 0 24-10.7 24-24z"/>
    </g>
</svg>
"""

# Here are the values for the icon animation,  order for closing. First is the hook second the curtain
iconposition = [(32, 0), (95, 65), (160, 130), (225, 195), (290, 260)]
iconcurtwidth = (15, 65)  # 65 is a delta, real is 15+65 = 80

cfgdefault = {
    "type": "hvac",
    "subtype": SUBTYPE,
    "host": "localhost",
    "port": 8745,
    "credential": "",
    "ssl": "",
    "restricted": "guibridge",
}


def configure():
    parser = argparse.ArgumentParser(description="Track proxied hvacs..")
    # version="%prog " + __version__ + "/" + bl.__version__)
    parser.add_argument(
        "-t",
        "--type",
        default=cfgdefault["type"],
        help='The type of devices we handle. (default "%s").' % cfgdefault["type"],
    )
    parser.add_argument(
        "-s",
        "--subtype",
        default=cfgdefault["subtype"],
        help='The specific subtype we manage. (default "%s").' % cfgdefault["subtype"],
    )
    parser.add_argument(
        "-a",
        "--host",
        default=cfgdefault["host"],
        help='The host address of the server (default "%s").' % cfgdefault["host"],
    )
    parser.add_argument(
        "-p",
        "--port",
        type=int,
        default=cfgdefault["port"],
        help='The port used by the server (default "%s").' % cfgdefault["port"],
    )
    parser.add_argument(
        "-c",
        "--config",
        default="/etc/autobuddy/proxy.cfg",
        type=argparse.FileType("r"),
        help='Config file to use (default "/etc/autobuddy/proxy.cfg")',
    )
    parser.add_argument(
        "-V",
        "--credential",
        default=cfgdefault["credential"],
        help='The credential used to verify authorization (default "%s").'
        % cfgdefault["credential"],
    )
    parser.add_argument(
        "-d",
        "--debug",
        action="count",
        default=0,
        help="Log debug information (default False)",
    )
    parser.add_argument(
        "-S",
        "--ssl",
        default="",
        help="The directory where the file %s can be found." % (CERTFILE),
    )
    parser.add_argument(
        "-r",
        "--restricted",
        default=cfgdefault["restricted"],
        help='Where to send "restricted events" (default "%s").'
        % cfgdefault["restricted"],
    )
    parser.add_argument(
        "-v",
        "--verbose",
        action="store_true",
        default=False,
        help="Log warning messages",
    )
    parser.add_argument(
        "-C",
        "--configonly",
        default="",
        help="Exit after the the configuration has been saved",
    )

    try:
        opts = parser.parse_args()
    except Exception as e:
        parser.error("Error: " + str(e))

    if opts.debug:
        logging.basicConfig(
            level=logging.DEBUG, format="%(levelname)7s: %(message)s", stream=sys.stderr
        )
    elif opts.verbose:
        logging.basicConfig(
            level=logging.WARNING,
            format="%(levelname)7s: %(message)s",
            stream=sys.stderr,
        )
    else:
        logging.basicConfig(
            level=logging.CRITICAL,
            format="%(levelname)7s: %(message)s",
            stream=sys.stderr,
        )
    proxylog = logging.getLogger("")
    proxycfg = {"debug": opts.debug}
    try:
        # if True:
        try:
            cfgdata = json.load(opts.config)
            opts.config.close()
        except:
            cfgdata = {}
            proxylog.warning("Config file could not be opened.")

        # Definition
        for attr in cfgdefault:
            if opts.__getattribute__(attr) != cfgdefault[attr]:
                proxycfg[attr] = opts.__getattribute__(attr)
            elif attr in cfgdata:
                proxycfg[attr] = cfgdata[attr]
            else:
                proxycfg[attr] = opts.__getattribute__(attr)
            if opts.debug:
                proxylog.debug("The %s is %s." % (attr, proxycfg[attr]))

        if proxycfg["ssl"] and not (os.path.isfile(proxycfg["ssl"] + "/" + CERTFILE)):
            proxylog.critical(
                "Encryption: Could not find {} .".format(
                    proxycfg["ssl"] + "/" + CERTFILE
                )
            )
            sys.exit()
        if opts.debug:
            if proxycfg["ssl"]:
                proxylog.debug(
                    "The ssl certificates can be found in %s" % proxycfg["ssl"]
                )
            else:
                proxylog.debug("The connection is not encrypted")

        if "buddykey" in cfgdata:
            proxycfg["buddykey"] = cfgdata["buddykey"]

        if opts.configonly:

            if "buddykey" not in proxycfg:
                if opts.debug:
                    proxylog.debug("Generating random key")
                proxycfg["buddykey"] = bl.keygen()
            try:
                del proxycfg["debug"]
            except:
                pass
            with open(opts.configonly, "w") as cfile:
                json.dump(proxycfg, cfile)
            os.chmod(opts.configonly, 384)  # 0600
            sys.exit()

    except Exception as e:
        proxylog.error("Error: %r" % e)
        sys.exit(-2)

    return (proxylog, proxycfg)


def special_cmp(a):
    if a.startswith("buf-mode-"):
        return "buf-0"
    if a.startswith("buf-temperature-"):
        return "buf-1"
    if a.startswith("buf-fan-"):
        return "buf-2"
    if a.startswith("buf-swing-"):
        return "buf-3"
    return a


if __name__ == "__main__":
    global plugs

    log, config = configure()
    log.info("Configured")

    # Let's get the plugins and generate all possible commands
    dir_path = os.path.join(os.path.dirname(__file__), "plugins")
    importlib.import_module("plugins")
    plugs = []
    for filename in os.listdir(dir_path):
        if "hvaclib.py" in filename:
            continue
        name, ext = os.path.splitext(filename)
        if ext.endswith(".py"):
            mod = importlib.import_module("." + name, package="plugins")
            plugs.append(mod.PluginObject())
    generated_xml = {}
    inserted_xml = set()
    lof = {}
    for p in plugs:
        for m in p.models:
            proxy_commands += """\n<item label="{}" value="{}" />\n""".format(
                p.brand.title() + " " + m, p.brand + "||" + m
            )
            ac = p.factory(m)
            for x, v in ac.available_functions().items():
                # print("Adding for {} : {}".format(x,v))
                lof[x] = v
            del ac
    proxy_commands += "</controlgroup>"
    # Now let's generate the xml
    mode_xml = ""
    temp_xml = ""
    fan_xml = ""
    swing_xml = ""
    other_xml = ""
    lofn = [x for x in lof.keys()]
    for i in lofn:
        if i in inserted_xml:
            continue
        _, f, k = i.split("-")
        if k not in generated_xml:  # Generation needed
            # Is this an On/Off thing?
            if f == "temperature":
                h = '<control type="slider" name="{}" label="{}" rteffect="1" onlyif="{}::yes">'
                s, e = k.split("|")
                e, step = e.split("__")
                v = """
                    <start>{}</start>
                    <end>{}</end>
                    <increment>{}</increment>
                </control>""".format(
                    s, e, int(step) / 10
                )
            elif len(lof[i]) == 2 and "on" in lof[i] and "off" in lof[i]:
                h = '<control type="switch" name="{}" label="{}" rteffect="1" onlyif="{}::yes">'
                v = """<value label="On">on</value>
                     <value label="Off">off</value>
                </control>"""
            elif len(lof[i]) == 2:
                h = '<control type="switch" name="{}" label="{}" rteffect="1" onlyif="{}::yes">'
                v = """<value label="{}">{}</value>
                     <value label="{}">{}</value>
                </control>""".format(
                    str(lof[i][0]).title(),
                    str(lof[i][0]),
                    str(lof[i][1]).title(),
                    str(lof[i][1]),
                )
            else:  # A choice it is
                h = '<controlgroup type="choice" name="{}" label="{}" rteffect="1" onlyif="{}::yes">'
                v = ""
                for val in lof[i]:
                    v += """<item label="{}" value="{}" />\n""".format(
                        str(val).title(), val
                    )
                v += "</controlgroup>"
            generated_xml[k] = (h, v)

        h, v = generated_xml[k]
        if f == "mode":
            mode_xml += "\n" + h.format(f, f.title(), i) + "\n" + v
        elif f == "temperature":
            temp_xml += "\n" + h.format(f, f.title(), i) + "\n" + v
        elif f == "fan":
            fan_xml += "\n" + h.format(f, f.title(), i) + "\n" + v
        elif f == "swing":
            swing_xml += "\n" + h.format(f, f.title(), i) + "\n" + v
        else:
            other_xml += "\n" + h.format(f, f.title(), i) + "\n" + v
        inserted_xml.add(i)

    proxy_commands += (
        mode_xml
        + "\n"
        + temp_xml
        + "\n"
        + fan_xml
        + "\n"
        + swing_xml
        + "\n"
        + other_xml
        + proxy_command_end
    )
    # Clean up
    del inserted_xml
    del generated_xml
    del lofn
    del mode_xml
    del temp_xml
    del fan_xml
    del swing_xml
    del other_xml

    loop = aio.get_event_loop()
    # if config["debug"]:
    # loop.set_debug(True)

    if config["ssl"]:
        sslcontext = ssl.create_default_context(
            ssl.Purpose.SERVER_AUTH, cafile=config["ssl"] + "/" + CERTFILE
        )

        sslcontext.check_hostname = False
    else:
        sslcontext = None
    connFuture = aio.Future()
    fac = loop.create_connection(
        partial(HVACBridge, loop, connFuture, config, log),
        config["host"],
        config["port"],
        ssl=sslcontext,
    )
    conn, bridgectl = loop.run_until_complete(fac)
    loop.call_soon(
        bridgectl.configrequest,
        {
            "about": {"HVACBuddy": aboutstr},
            "display": {config["type"]: {config["subtype"]: iconstr}},
            "config name": config["subtype"] + "-hvac",
        },
    )

    try:
        loop.run_until_complete(connFuture)
    except KeyboardInterrupt:
        print("\n", "Exiting at user's request")
    finally:
        bridgectl.shuttingdown = True
        loop.run_until_complete(aio.sleep(3))
        conn.close()
        loop.close()
